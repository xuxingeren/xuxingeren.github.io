<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陌路凡歌的个人博客</title>
  <subtitle>前端的技术分享与个人见解</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuxin123.com/"/>
  <updated>2017-12-30T10:36:38.969Z</updated>
  <id>http://xuxin123.com/</id>
  
  <author>
    <name>徐新-陌路凡歌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再见2017</title>
    <link href="http://xuxin123.com/2017/12/31/2017/"/>
    <id>http://xuxin123.com/2017/12/31/2017/</id>
    <published>2017-12-31T02:32:22.000Z</published>
    <updated>2017-12-30T10:36:38.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/31/1.jpg" alt="再见2017"></p>
<p>要到年末了，今年成长了不少，当然还是有太多的东西没有去接触，学习的道路还很漫长，路漫漫其修远兮，吾将上下而求索。</p>
<p>这个月底离职了，不准备待在重庆了，准备在家里进修学习一段时间，年后出去见见外面的世界，希望来年能再接再厉，继续成长。</p>
<p>稍微总结一下今年吧，我是去年入的前端这个坑的，原本学专业是通信工程，由于本人是个学渣，大学又没好好的学习，不知道工作的方向，大四下学期在一个偶然的机会下接触到了前端页面，当时是出于好奇心，觉得写着很好玩，就慢慢的向这个方向学习了。</p>
<p>当时什么都不懂，看着文档一点一点学习的，我这个野路子能坚持下去也挺不容易的，其实能坚持下来主要出于我的兴趣，写出东西对于我来说真的很有成就感，学写第一个轮播图做出来后真的cool。不过cool归cool，找工作挺难的，找了好久才找到第一份工作，当时干了5个月吧，月薪才1000，算是免费苦力吧，写建站模板，16年年底就辞了，当时是真的努力，白天写代码，晚上回去看学习视频，边看边敲代码，不想现在懒得要死，当时主要学的是jq，js什么的没去系统的接触，css也挺蹩脚的。</p>
<p>今年成长算是挺大的，买了一堆书，虽然才看完两本，JavaScrip语言精萃和dom编程艺术，确实很经典，说来惭愧，高级程序设计居然还没看，阮一峰老师的ES6入门也在学，不过我这人特笨，看了忘，忘了看，来来回回也没看完。css倒是收获挺大的，vue和react都只学了点皮毛，react native和mui也看了看，还是挺有趣的，只是写了点小东西，等明年实际运用了，当然还准备学一下小程序，但是目前没啥时间。</p>
<p>今年最大的收获是把js和css基础重新学习了一遍，在写代码时效率快了很多，有很多人问我该学什么，什么什么框架呀，我的回答是基础真的很重要，先别忙着去学习什么什么框架，先把基础打好，用框架写东西会感觉很简单，比如在学React之前把ES6学一下就不会感觉jsx的写法很怪异了。</p>
<p>说了这么多，其实我也是个菜鸟，学的很多东西都是理论上的，由于公司原因很多东西都没有实际运用，希望在明年能够得到实践。</p>
<p>再见17，欢迎18！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/31/1.jpg&quot; alt=&quot;再见2017&quot;&gt;&lt;/p&gt;
&lt;p&gt;要到年末了，今年成长了不少，当然还是有太多的东西没有去接触，学习的道路还很漫长，路漫漫其修远兮，吾
    
    </summary>
    
      <category term="文章" scheme="http://xuxin123.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="闲谈" scheme="http://xuxin123.com/tags/%E9%97%B2%E8%B0%88/"/>
    
      <category term="总结" scheme="http://xuxin123.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>特效篇--图片环绕</title>
    <link href="http://xuxin123.com/2017/12/30/surround/"/>
    <id>http://xuxin123.com/2017/12/30/surround/</id>
    <published>2017-12-30T07:37:54.000Z</published>
    <updated>2018-01-02T02:24:58.192Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/30/1.png" alt="图片环绕"><br>2017年快要结束了，来点特效的东西作为2017年博客的结束篇吧，其实特效这东西看看就好了，实际用处不是特别的大，不过效果什么的还是挺酷的。</p>
<p>本文介绍的是图片环绕，散列切换如何完成的，一共三个切换效果，先看看效果吧：<br><iframe src="/code/surround.html" width="100%" height="800px" frameborder="0" allowfullscreen></iframe><br>当然博客展示的面积不够：请点这里查看全部效果<a href="http://xuxin123.com/code/surround.html" target="_blank">链接</a>。<br>废话不多说直接上代码了：<br>html：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"btnbox"</span>&gt;</div><div class="line">    &lt;button <span class="keyword">class</span>=<span class="string">"show btn"</span>&gt;散列&lt;/button&gt;</div><div class="line">    &lt;button <span class="keyword">class</span>=<span class="string">"btn"</span>&gt;横环装&lt;/button&gt;</div><div class="line">    &lt;button <span class="keyword">class</span>=<span class="string">"btn"</span>&gt;竖环装&lt;/button&gt;</div><div class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"pox"</span>&gt;&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"change"</span>&gt;自动播放：&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">input</span> id=<span class="string">"change"</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span>/&gt;</div><div class="line">    &amp;nbsp;速度：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"range"</span> value=<span class="string">"4"</span> max=<span class="string">"10"</span> min=<span class="string">"1"</span> id=<span class="string">"speed"</span> value=<span class="string">"1"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"wrap"</span> id=<span class="string">"wrap"</span>&gt;</div><div class="line"></div><div class="line">    &lt;!--    <span class="comment">//photo平移旋转        </span></div><div class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"photo  photo-front"</span>"&gt;</div><div class="line">        <span class="comment">//photo-wrap负责翻转</span></div><div class="line">            &lt;div <span class="keyword">class</span>=<span class="string">"photo-wrap"</span>&gt;</div><div class="line">                &lt;div <span class="keyword">class</span>=<span class="string">"side side-front"</span>&gt;</div><div class="line">                    &lt;p <span class="keyword">class</span>=<span class="string">"imgs"</span>&gt;&lt;img src=<span class="string">""</span>/&gt;&lt;/p&gt;</div><div class="line">                    &lt;p <span class="keyword">class</span>=<span class="string">"caption"</span>&gt;&lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">                &lt;div <span class="keyword">class</span>=<span class="string">"side side-back"</span>&gt;</div><div class="line">                    &lt;p <span class="keyword">class</span>=<span class="string">"desc"</span>&gt;</div><div class="line">                        </div><div class="line">                    &lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">        &lt;/div&gt;	</div><div class="line">    &lt;/div&gt; --&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>html还是挺简单的，<code>btnbox</code>就是控制图片排列和轮播的控制台，<code>#wrap</code>就是我们的放置容器了，注释的代码是大致的样式，我们用两层div包裹住文字和图片，第一层div(<code>.photo</code>)，这个是负责整个块的移动的，第二层div(<code>.photo-wrap</code>)是负责自身的前后两面翻转的，<code>.side-front</code>负责前面的图片和文字显示，<code>.side-back</code>负责背面的文字显示，由于所有的图片内容都是根据一个json生成的，所以这里<code>#wrap</code>里面所有的内容都是通过js生成的，<code>#wrap</code>实际上不用放任何东西。<br>css：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-class">.wrap</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.8);</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">perspective</span>: <span class="number">1800px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.photo</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">260px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">320px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.01);</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin</span>: -<span class="number">160px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">130px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.photo</span> <span class="selector-class">.side</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">backface-visibility</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.photo</span> <span class="selector-class">.side-front</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(0deg);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.side-back</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*当前选中样式*/</span></div><div class="line"> <span class="selector-class">.photo-center</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin</span>: -<span class="number">160px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">130px</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.photo-wrap</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.photo-front</span> <span class="selector-class">.photo-wrap</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(0deg) <span class="built_in">translate</span>(0px, 0px);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.photo-back</span> <span class="selector-class">.photo-wrap</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg) <span class="built_in">translate</span>(-260px, 0px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>css算是比较复杂吧，主要是涉及css3的内容太多了，不熟悉的去充充电吧，这里只列出了一部分css，稍微讲解一下，基础的就不说了。<br>正反翻转：<code>.side</code>是反面和正面的共同属性,<code>.side-front</code>是正面所以<code>transform: rotateY(0deg);</code>旋转了0度正对屏幕，<code>.side-back</code>是背面用<code>transform: rotateY(180deg);</code>旋转180度，背面对着屏幕，其中用到了<code>backface-visibility: hidden;</code>这个属性，这个属性让不面向屏幕的旋转元素背面影藏掉，即<code>.side-back</code>隐藏掉了，当翻转<code>.photo-wrap</code>时，<code>.side-front</code>就隐藏了，这就让<code>.photo-wrap</code>看起来就像真的有两面一样。<br>原地翻转动画：<code>.photo-wrap</code>沿着Y轴旋转时我们要让其沿着左边进行180度旋转，所以transform-origin的x轴一定要为0，旋转后<code>.photo-wrap</code>就向左边移动了它本身的宽度的距离，简单来说就像翻书一样，一页翻过去了就相当于移动了一页的距离。我们要让其原地翻转就要对其x轴的translate进行设置，让其向右边移动它本身的宽度的距离，所以设置<code>translate(-260px, 0px)</code>，这样就相当于它没有进行移动了,看起来就像原地翻转一样。</p>
<p>比较难以理解的css就是这些了，开始正式写了。<br>工欲善其事必先利其器，首先我们先准备好要渲染的数据，组合一个json，复杂的东西懒得写，就写点简简单单的吧，放40张图片吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = [];          </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">41</span>; i++) &#123;</div><div class="line">        data.push(&#123;</div><div class="line">            img: <span class="string">'./waterfall/images/'</span> + i + <span class="string">'.jpg'</span>,</div><div class="line">            caption: <span class="string">'第'</span> + texthan(i) + <span class="string">'张'</span>,</div><div class="line">            desc: <span class="string">'描述'</span> + texthan(i)</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">texthan</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> han = [<span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>, <span class="string">'七'</span>, <span class="string">'八'</span>, <span class="string">'九'</span>, <span class="string">'十'</span>];</div><div class="line">    <span class="keyword">if</span> (n &gt; <span class="number">10</span>) &#123;</div><div class="line">        <span class="keyword">var</span> s = <span class="built_in">Math</span>.floor(n / <span class="number">10</span>) &gt; <span class="number">1</span> ? han[<span class="built_in">Math</span>.floor(n / <span class="number">10</span>) - <span class="number">1</span>] + <span class="string">'十'</span> : <span class="string">'十'</span>;</div><div class="line">        <span class="keyword">var</span> g = n % <span class="number">10</span> - <span class="number">1</span> &gt;= <span class="number">0</span> ? han[n % <span class="number">10</span> - <span class="number">1</span>] : <span class="string">''</span>;</div><div class="line">        <span class="keyword">return</span> s + g;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> han[n - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//其实大致就是下面这个json，img为图片地址，caption是第几张图，desc是图片描述</span></div><div class="line">[&#123;<span class="attr">img</span>: <span class="string">"./waterfall/images/1.jpg"</span>, <span class="attr">caption</span>: <span class="string">"第一张"</span>, <span class="attr">desc</span>: <span class="string">"描述一"</span>&#125;,&#123;<span class="attr">img</span>: <span class="string">"./waterfall/images/2.jpg"</span>, <span class="attr">caption</span>: <span class="string">"第二张"</span>, <span class="attr">desc</span>: <span class="string">"描述二"</span>&#125;,&#123;<span class="attr">img</span>: <span class="string">"./waterfall/images/3.jpg"</span>, <span class="attr">caption</span>: <span class="string">"第三张"</span>, <span class="attr">desc</span>: <span class="string">"描述三"</span>&#125;]</div></pre></td></tr></table></figure></p>
<p>好了，图片准备好了，开始写函数了，其他的东西懒得配置了，就俩个配置项，<code>activeindex</code>是当前选中的图片索引，<code>state</code>是轮播的类型：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function Surround(option) &#123;</div><div class="line">    option = option || &#123;&#125;;</div><div class="line">    this.activeindex = option.activeindex || <span class="number">0</span>;</div><div class="line">    this.<span class="keyword">state</span> = option.<span class="keyword">state</span> || <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>老规矩，先来几个工具函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Surround.prototype = &#123;</div><div class="line">    getdom: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> method = obj.substr(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">'.'</span> ? <span class="string">'getElementsByClassName'</span> : <span class="string">'getElementById'</span>;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">document</span>[method](obj.substr(<span class="number">1</span>));</div><div class="line">    &#125;,</div><div class="line">    getwh: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            w: obj.clientWidth,</div><div class="line">            h: obj.clientHeight</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    select: <span class="function"><span class="keyword">function</span> (<span class="params">start, end</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> num = end - start + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * num + start);</div><div class="line">    &#125;,</div><div class="line">    time:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.activeindex &gt; data.length - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.activeindex = <span class="number">0</span>;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">this</span>.rsort(<span class="keyword">this</span>.activeindex);            </div><div class="line">        <span class="keyword">this</span>.activeindex++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>getdom</code>用于获取节点，<code>getwh</code>返回传入dom的宽高集合，<code>select</code>返回传入最大数和最小数之间的随机数，<code>time</code>负责轮播的切换。<br>其实轮播的原理很简单，从<code>.photo</code>中选出一个放在中间，其余的通过随机数给生成随机的top和left以及旋转角度，，点击中间的，调用的是翻转函数，点击其他的则把你点击的放中间，其他的再随机生成。移动动画什么的交给css3的transition完成。<br>原理说了，下面开始生成图片了，注下面的函数全写在Surround.prototype里的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">addPhotos: function (data) &#123;</div><div class="line">    <span class="keyword">var</span> lists = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> nav = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> navbox = document.createElement(<span class="string">'div'</span>);</div><div class="line">    navbox.className = <span class="string">'nav'</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</div><div class="line">        <span class="keyword">var</span> photobox =</div><div class="line">            `&lt;div <span class="keyword">class</span>=<span class="string">"photo  photo-front"</span>  id=<span class="string">"photo_$&#123;i&#125;"</span>&gt;</div><div class="line">                &lt;div <span class="keyword">class</span>=<span class="string">"photo-wrap"</span>&gt;</div><div class="line">                    &lt;div <span class="keyword">class</span>=<span class="string">"side side-front"</span>&gt;</div><div class="line">                        &lt;p <span class="keyword">class</span>=<span class="string">"imgs"</span>&gt;</div><div class="line">                            &lt;img src=<span class="string">"$&#123;data[i].img&#125;"</span> /&gt;</div><div class="line">                        &lt;/p&gt;</div><div class="line">                        &lt;p <span class="keyword">class</span>=<span class="string">"caption"</span>&gt;$&#123;data[i].caption&#125;&lt;/p&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div <span class="keyword">class</span>=<span class="string">"side side-back"</span>&gt;</div><div class="line">                        &lt;p <span class="keyword">class</span>=<span class="string">"desc"</span>&gt;</div><div class="line">                            $&#123;data[i].desc&#125;</div><div class="line">                        &lt;/p&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;`;</div><div class="line">        <span class="keyword">var</span> navitem = `&lt;span id=<span class="string">"nav_$&#123;i&#125;"</span>  <span class="keyword">class</span>=<span class="string">"i"</span>&gt;&lt;/span&gt;`</div><div class="line">        nav += navitem;</div><div class="line">        lists += photobox;</div><div class="line">    &#125;</div><div class="line">    navbox.innerHTML = nav;</div><div class="line">    <span class="keyword">this</span>.getdom(<span class="string">'#wrap'</span>).innerHTML = lists;</div><div class="line">    <span class="keyword">this</span>.getdom(<span class="string">"#wrap"</span>).append(navbox);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> i = <span class="keyword">this</span>.getdom(<span class="string">".nav"</span>)[<span class="number">0</span>].getElementsByClassName(<span class="string">'i'</span>);</div><div class="line">    <span class="keyword">var</span> photo = <span class="keyword">this</span>.getdom(<span class="string">".photo"</span>);</div><div class="line"></div><div class="line">    [<span class="meta"></span>].slice.call(i).forEach(function(el,index) &#123;</div><div class="line">        el.onclick = function()&#123;</div><div class="line">            <span class="keyword">this</span>.turn(<span class="keyword">this</span>.getdom(<span class="string">'#photo_'</span>+index));</div><div class="line">        &#125;.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;,<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    [<span class="meta"></span>].slice.call(photo).forEach(function(el,index)&#123;</div><div class="line">        el.onclick = function(<span class="keyword">event</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.turn(<span class="keyword">event</span>.currentTarget);</div><div class="line">        &#125;.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;,<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.rsort(<span class="keyword">this</span>.activeindex);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们先通过遍历data这个json创建出同数量的<code>.photo</code>和分页器<code>.nav</code>，然后分别给其添加点击事件调用<code>turn()</code>函数，然后调用<code>rsort()</code>函数传入<code>this.activeindex</code>，获得当前居中的索引。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">turn: <span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cls = elem.className;</div><div class="line">    <span class="keyword">var</span> n = elem.id.split(<span class="string">'_'</span>)[<span class="number">1</span>];</div><div class="line">    <span class="keyword">this</span>.activeindex = <span class="built_in">Number</span>(n);</div><div class="line">    <span class="keyword">if</span> (!elem.classList.contains(<span class="string">"photo-center"</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rsort(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (elem.classList.contains(<span class="string">'photo-front'</span>)) &#123;</div><div class="line">        cls = cls.replace(<span class="regexp">/photo-front/</span>, <span class="string">"photo-back"</span>);</div><div class="line">        <span class="keyword">this</span>.getdom(<span class="string">"#nav_"</span> + n).classList.add(<span class="string">'i_back'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        cls = cls.replace(<span class="regexp">/photo-back/</span>, <span class="string">"photo-front"</span>);</div><div class="line">        <span class="keyword">this</span>.getdom(<span class="string">"#nav_"</span> + n).classList.remove(<span class="string">'i_back'</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> elem.className = cls;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>turn()</code>函数其实就是翻转函数，它根据传入函数的class判断是不是居中的<code>.photo</code>，是的话通过添加和移除class进行翻转，否者把<code>this.activeindex</code>改变为你点击的索引，调用<code>rsort()</code>函数传入<code>this.activeindex</code>。<br>下面是主要的变化函数了：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> rsort: function (n) &#123;</div><div class="line">    <span class="keyword">var</span> _photo = <span class="keyword">this</span>.getdom(<span class="string">'.photo'</span>);</div><div class="line">    <span class="keyword">var</span> wrap = <span class="keyword">this</span>.getwh(<span class="keyword">this</span>.getdom(<span class="string">'#wrap'</span>));</div><div class="line">    <span class="keyword">var</span> photo = <span class="keyword">this</span>.getwh(<span class="keyword">this</span>.getdom(<span class="string">'.photo'</span>)[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">var</span> photos = []</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _photo.length; i++) &#123;</div><div class="line">        _photo[i].className = <span class="string">'photo photo-front'</span>;</div><div class="line">        _photo[i].style.left = <span class="string">''</span>;</div><div class="line">        _photo[i].style.top = <span class="string">''</span>;</div><div class="line">        _photo[i].style[<span class="string">'transform'</span>] = <span class="string">'rotate(0deg) scale(1.3)'</span>;</div><div class="line">        photos.push(_photo[i]);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> photo_center = <span class="keyword">this</span>.getdom(<span class="string">'#photo_'</span> + n);</div><div class="line">    photo_center.className += <span class="string">' photo-center'</span>;</div><div class="line">    photo_center = photos.splice(n, <span class="number">1</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="number">0</span>) &#123;    </div><div class="line">    <span class="keyword">this</span>.separate(photos,function(photo)&#123;</div><div class="line">        photo.style.left = <span class="keyword">this</span>.range().left.x + <span class="string">'px'</span>;</div><div class="line">        photo.style.top = <span class="keyword">this</span>.range().left.y + <span class="string">'px'</span>;</div><div class="line">        photo.style[<span class="string">'transform'</span>] = <span class="string">'rotate('</span> + <span class="keyword">this</span>.select(<span class="number">-90</span>, <span class="number">90</span>) + <span class="string">'deg) scale(1)'</span>;</div><div class="line">    &#125;,function(photo)&#123;</div><div class="line">        photo.style.left = <span class="keyword">this</span>.range().right.x + <span class="string">'px'</span>;</div><div class="line">        photo.style.top = <span class="keyword">this</span>.range().right.y + <span class="string">'px'</span>;</div><div class="line">        photo.style[<span class="string">'transform'</span>] = <span class="string">'rotate('</span> + <span class="keyword">this</span>.select(<span class="number">-90</span>, <span class="number">90</span>) + <span class="string">'deg) scale(1)'</span>;</div><div class="line">    &#125;);   </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> s <span class="keyword">in</span> photos)&#123;</div><div class="line">            photos[s].style[<span class="string">'transform'</span>] = <span class="string">'rotate('</span> + <span class="keyword">this</span>.select(<span class="number">0</span>, <span class="number">360</span>) +</div><div class="line">            <span class="string">'deg) scale(1) translate(500px)'</span>;</div><div class="line">        &#125;;   </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> r = <span class="number">460</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt; photos.length; s++) &#123;</div><div class="line">            <span class="keyword">var</span> deg = <span class="keyword">this</span>.select(<span class="number">0</span>, <span class="number">360</span>);</div><div class="line">            <span class="keyword">var</span> sinY = Math.sin(deg * Math.PI / <span class="number">180</span>) * r;</div><div class="line">            <span class="keyword">var</span> cosX = Math.cos(deg * Math.PI / <span class="number">180</span>) * r;</div><div class="line">            photos[s].style.top = ((wrap.h / <span class="number">2</span>) + sinY) + <span class="string">'px'</span>;</div><div class="line">            photos[s].style.left = ((wrap.w / <span class="number">2</span>) + cosX) + <span class="string">'px'</span>;</div><div class="line">            photos[s].style.transform = <span class="string">'rotate('</span> + (deg + <span class="number">90</span>) + <span class="string">'deg)'</span></div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> navs = <span class="keyword">this</span>.getdom(<span class="string">'.i'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; navs.length; i++) &#123;</div><div class="line">        navs[i].className = <span class="string">'i'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.getdom(<span class="string">"#nav_"</span> + n).className += <span class="string">' i_current'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>rsort()</code>函数先把所有的样式全部重置，然后把所有的<code>.photo</code>放入一个数组中，根据传入的索引把当前要居中的<code>.photo</code>取出来给其添加居中的class，<br>剩余的用for循环给其添加随机的样式。<code>separate()</code>函数的作用是把剩余<code>.photo</code>分成两部分，然后在回调函数里给其设置样式，<code>range()</code>函数的主要作用是将分成两部分的<code>.photo</code>给区分放置，一份放居中元素的左边，一份放居中元素的右边，写这个两个函数的原因是散列时有可能全部挤在一堆了，留下一堆空白的不好看，左右两边均分一下。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">separate:function(photos,lfn,rfn)&#123;</div><div class="line">    <span class="keyword">var</span> photos_left = photos.splice(<span class="number">0</span>, Math.ceil(photos.length / <span class="number">2</span>));</div><div class="line">    <span class="keyword">var</span> photos_right = photos;</div><div class="line">    <span class="keyword">for</span>(s <span class="keyword">in</span> photos_left)&#123;</div><div class="line">        <span class="keyword">var</span> photo = photos_left[s];</div><div class="line">        lfn.apply(<span class="keyword">this</span>,[photo]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(s <span class="keyword">in</span> photos_right)&#123;</div><div class="line">        <span class="keyword">var</span> photo = photos_right[s];</div><div class="line">        rfn.apply(<span class="keyword">this</span>,[photo]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">range: function () &#123;</div><div class="line">    <span class="keyword">var</span> range = &#123;</div><div class="line">        left: &#123;</div><div class="line">            x: [],</div><div class="line">            y: []</div><div class="line">        &#125;,</div><div class="line">        right: &#123;</div><div class="line">            x: [],</div><div class="line">            y: []</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> wrap = <span class="keyword">this</span>.getwh(<span class="keyword">this</span>.getdom(<span class="string">'#wrap'</span>));</div><div class="line">    <span class="keyword">var</span> photo = <span class="keyword">this</span>.getwh(<span class="keyword">this</span>.getdom(<span class="string">'.photo'</span>)[<span class="number">0</span>]);</div><div class="line">    range.left.x = <span class="keyword">this</span>.select(-photo.w, (wrap.w - photo.w) / <span class="number">2</span>);</div><div class="line">    range.left.y = <span class="keyword">this</span>.select(-photo.h, wrap.h);</div><div class="line">    range.right.x = <span class="keyword">this</span>.select((wrap.w - photo.w) / <span class="number">2</span>, wrap.w);</div><div class="line">    range.right.y = <span class="keyword">this</span>.select(-photo.h, wrap.h);</div><div class="line">    <span class="keyword">return</span> range;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>this.state</code>为0的样式就基本完成了，至于<code>this.state</code>成圆环状的样式写法原因参考我<a href="http://xuxin123.com/2017/12/17/time1/" target="_blank">时间–时钟篇</a>，这里面有说明。<br>好了Surround函数基本完成了，下面我们开始调用，surround.getdom这个只是顺便用了Surround函数里面获取dom的函数：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//轮播</span></div><div class="line"><span class="keyword">var</span> surround = <span class="keyword">new</span> Surround();</div><div class="line">surround.addPhotos(data());</div><div class="line">surround.getdom(<span class="string">"#change"</span>).onchange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.checked) &#123;</div><div class="line">        <span class="keyword">var</span> speed =surround.getdom(<span class="string">'#speed'</span>).value;</div><div class="line">        surround.getdom(<span class="string">'#speed'</span>).onchange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">            speed = <span class="keyword">this</span>.value;</div><div class="line">            clearInterval(timer);</div><div class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">                surround.time(data());</div><div class="line">            &#125;, speed * <span class="number">500</span>);</div><div class="line">        &#125;;</div><div class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            surround.time(data());</div><div class="line">        &#125;, speed * <span class="number">500</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        clearInterval(timer);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//切换样式</span></div><div class="line">btn();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">btn</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; surround.getdom(<span class="string">'.btn'</span>).length; i++) &#123;</div><div class="line">        (<span class="function"><span class="keyword">function</span> <span class="params">(i)</span> </span>&#123;</div><div class="line">            surround.getdom(<span class="string">".btn"</span>)[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; surround.getdom(<span class="string">'.btn'</span>).length; j++) &#123;</div><div class="line">                    surround.getdom(<span class="string">".btn"</span>)[j].className = <span class="string">'btn'</span>;</div><div class="line">                &#125;;</div><div class="line">                surround.getdom(<span class="string">".btn"</span>)[i].className = <span class="string">'btn show'</span>;</div><div class="line">                surround.state = i;</div><div class="line">                surround.rsort(surround.activeindex);</div><div class="line">            &#125;;</div><div class="line">        &#125;)(i);</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>本文代码地址<a href="https://github.com/xuxingeren/blog/blob/master/specially/surround.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/30/1.png&quot; alt=&quot;图片环绕&quot;&gt;&lt;br&gt;2017年快要结束了，来点特效的东西作为2017年博客的结束篇吧，其实特效这东西看看就好了，实际用处不是特别的
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="图片环绕" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E7%8E%AF%E7%BB%95/"/>
    
      <category term="图片轮播" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/"/>
    
      <category term="特效" scheme="http://xuxin123.com/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>Canvas --雪花图</title>
    <link href="http://xuxin123.com/2017/12/23/snow/"/>
    <id>http://xuxin123.com/2017/12/23/snow/</id>
    <published>2017-12-23T08:06:41.000Z</published>
    <updated>2017-12-23T10:24:39.761Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/23/1.png" alt="雪花图"><br>昨天冬至，又到了白色相簿的季节了，︿(￣︶￣)︿笑，后天就是圣诞了，安安心心做个剩蛋老人吧(ノへ￣、)。<br>好了好了，重庆还是没下雪，冷着不下雪，感觉好亏。既然不下，那就只有自己写点雪花了。<br>canvas这个东西一直是想深入学习的，做出来的东西各种炫酷吊炸天，但是没啥时间，就只会点小东西，大家将就着看吧：<br>首先既然是用canvas，那么结构就非常简单啦，html什么都不用写，用js创建canvas。<br>我们把一张背景图放在body上，然后在canvas上进行雪花的绘制：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;	</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;			</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"./xh.jpg"</span>) center no-repeat;	</div><div class="line">    <span class="attribute">overflow</span>: hidden;	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这次就不用es6的写法了，用prototype吧：<br>首先我们用requestAnimationFrame绘制动画的，先把兼容性搞一下，再创建函数snowFall，设置一下默认参数，maxFlake、flakeSize和fallSpeed，在进行初始化时，可以通过new snowFall()传入这三个参数改变雪花的样式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//兼容写法</span></div><div class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</div><div class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</div><div class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</div><div class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</div><div class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</div><div class="line">    snow = snow || &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.maxFlake = snow.maxFlake || <span class="number">500</span>;   <span class="comment">/* 最大片数 */</span></div><div class="line">    <span class="keyword">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花大小 */</span></div><div class="line">    <span class="keyword">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></div><div class="line">    <span class="keyword">this</span>.flakes = [];                      <span class="comment">/* 雪花集合 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们在这个函数上添加一个start方法，调用此方法开始创建画布绘制雪花，出现下雪效果：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开始绘制雪花</span></div><div class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/* 创建画布 */</span></div><div class="line">    snowCanvas.apply(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">/* 创建雪花形状 */</span></div><div class="line">    createFlakes.apply(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">/* 画雪 */</span></div><div class="line">    drawSnow.apply(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来开始创建画布了,建立一个canvas放入body中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建画布</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">    snowcanvas.id = <span class="string">"snowfall"</span>;</div><div class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</div><div class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight || <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(snowcanvas);</div><div class="line">    <span class="keyword">this</span>.canvas = snowcanvas;</div><div class="line">    <span class="keyword">this</span>.ctx = snowcanvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></div><div class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</div><div class="line">        snowcanvas.height = <span class="built_in">window</span>.innerHeight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着创建雪花的形状，这里循环一下要绘制的雪花，用一个雪运动对象设置每个雪花的参数，然后将雪花放入雪花集合中：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建雪花对象</span></div><div class="line">function createFlakes() &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.maxFlake; i++) &#123;</div><div class="line">        <span class="keyword">this</span>.flakes.push(new flakeMove(<span class="keyword">this</span>.canvas.width, <span class="keyword">this</span>.canvas.height, <span class="keyword">this</span>.flakeSize, <span class="keyword">this</span>.fallSpeed))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>雪花运动对象，用于生成每个雪花的一系列参数：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//雪运动对象</span></div><div class="line">function flakeMove(canvasWidth, canvasHeight, flakeSize, fallSpeed) &#123;</div><div class="line">    <span class="keyword">this</span>.canvasw = canvasWidth;</div><div class="line">    <span class="keyword">this</span>.canvash = canvasHeight;</div><div class="line">    <span class="keyword">this</span>.x = Math.floor(Math.random() * canvasWidth); <span class="comment">/* x坐标 */</span></div><div class="line">    <span class="keyword">this</span>.y = Math.floor(Math.random() * canvasHeight); <span class="comment">/* y坐标 */</span></div><div class="line">    <span class="keyword">this</span>.size = Math.random() * flakeSize + <span class="number">2</span>; <span class="comment">/* 形状 */</span></div><div class="line">    <span class="keyword">this</span>.maxSize = flakeSize; <span class="comment">/* 最大形状 */</span></div><div class="line">    <span class="keyword">this</span>.speed = Math.random() * <span class="number">1</span> + fallSpeed; <span class="comment">/* 坠落速度 */</span></div><div class="line">    <span class="keyword">this</span>.fallSpeed = fallSpeed; <span class="comment">/* 坠落速度 */</span></div><div class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed; <span class="comment">/* Y方向速度 */</span></div><div class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>; <span class="comment">/* X方向速度 */</span></div><div class="line">    <span class="keyword">this</span>.stepSize = Math.random() / <span class="number">100</span>; <span class="comment">/* 步长 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在雪的运动对象上添加一个render方法，用于生成雪的形状<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></div><div class="line">flakeMove.prototype.render = function (ctx) &#123;</div><div class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">0</span>, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size);</div><div class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">"rgba(255, 255, 255, 0.9)"</span>); <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></div><div class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">"rgba(255, 255, 255, 0.5)"</span>); </div><div class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">"rgba(255, 255, 255, 0)"</span>); </div><div class="line">    ctx.save();</div><div class="line">    ctx.fillStyle = snowFlake;</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size, <span class="number">0</span>, Math.PI * <span class="number">2</span>);</div><div class="line">    ctx.fill();</div><div class="line">    ctx.restore();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在雪的运动对象上添加一个雪花的运动方法，根据传入的参数不同，来让雪向左向右运动，当雪花飞到了边界后，调用reset方法重置这个雪花的状态：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">flakeMove.prototype.update = function (n) &#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</div><div class="line">        y = <span class="keyword">this</span>.y;</div><div class="line">    <span class="keyword">if</span> (n) &#123;</div><div class="line">        <span class="keyword">this</span>.velX += <span class="keyword">this</span>.stepSize;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.velX -= <span class="keyword">this</span>.stepSize;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.velY;</div><div class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.velX;</div><div class="line">    <span class="comment">/* 飞出边界的处理 */</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= <span class="keyword">this</span>.canvasw || <span class="keyword">this</span>.x &lt;= <span class="number">0</span> || <span class="keyword">this</span>.y &gt;= <span class="keyword">this</span>.canvaswh || <span class="keyword">this</span>.y &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.reset(<span class="keyword">this</span>.canvasw, <span class="keyword">this</span>.canvash)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></div><div class="line">flakeMove.prototype.reset = function (width, height) &#123;</div><div class="line">    <span class="keyword">this</span>.x = Math.floor(Math.random() * width);</div><div class="line">    <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.size = Math.random() * <span class="keyword">this</span>.maxSize + <span class="number">2</span>;</div><div class="line">    <span class="keyword">this</span>.speed = Math.random() * <span class="number">1</span> + <span class="keyword">this</span>.fallSpeed;</div><div class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;</div><div class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>雪花对象设置完毕后，我们开始画雪了，每次绘制前我们都要清空一下画布，然后根据雪花的集合进行遍历，调用函数让一部分雪花向左飘，一部分向右飘，然后用requestAnimationFrame继续调用画雪的函数，一帧一帧绘制雪花：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 画雪 */</span></div><div class="line">function drawSnow() &#123;</div><div class="line">    <span class="comment">/* 清空雪花 */</span></div><div class="line">    <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.canvas.width, <span class="keyword">this</span>.canvas.height);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; <span class="keyword">this</span>.maxFlake; e++) &#123;</div><div class="line">        <span class="keyword">if</span> (e % <span class="number">3</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.flakes[e].update(<span class="number">0</span>);</div><div class="line">            <span class="keyword">this</span>.flakes[e].render(<span class="keyword">this</span>.ctx);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.flakes[e].update(<span class="number">1</span>);</div><div class="line">            <span class="keyword">this</span>.flakes[e].render(<span class="keyword">this</span>.ctx);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*  一帧一帧的画 */</span></div><div class="line">    <span class="keyword">this</span>.loop = requestAnimationFrame(function () &#123;</div><div class="line">        drawSnow.apply(<span class="keyword">this</span>);</div><div class="line">    &#125;.bind(<span class="keyword">this</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们 new snowFall()，最多绘制100个雪花，然后调用start方法，雪花就开始飞舞了：<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 调用及控制方法 */</span></div><div class="line"><span class="keyword">var</span> snow = <span class="function"><span class="keyword">new</span> <span class="title">snowFall</span>(&#123;</span></div><div class="line"><span class="function">    maxFlake: <span class="number">100</span></span></div><div class="line"><span class="function">&#125;);</span></div><div class="line"><span class="function"><span class="title">snow</span>.<span class="title">start</span>();</span></div></pre></td></tr></table></figure></p>
<p>效果展示：</p>
<iframe src="/code/canvas/snow.html" width="100%" height="400px" frameborder="0" allowfullscreen></iframe>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/blob/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/canvas/snow.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/23/1.png&quot; alt=&quot;雪花图&quot;&gt;&lt;br&gt;昨天冬至，又到了白色相簿的季节了，︿(￣︶￣)︿笑，后天就是圣诞了，安安心心做个剩蛋老人吧(ノへ￣、)。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="Canvas" scheme="http://xuxin123.com/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>时间--时钟篇</title>
    <link href="http://xuxin123.com/2017/12/17/time1/"/>
    <id>http://xuxin123.com/2017/12/17/time1/</id>
    <published>2017-12-17T06:20:37.000Z</published>
    <updated>2017-12-19T09:43:00.331Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/18/1.png" alt="时间-时钟"><br>这天是越来越冷了，人也越发的懒起来，早上起来简直要老命，下班回去也只想进被子里面，游戏都不想打了╮（﹀_﹀）╭，冷呀。。。。<br>好了，写个时钟来激励一下懒惰的自己吧。</p>
<h3 id="旋转方式"><a href="#旋转方式" class="headerlink" title="旋转方式"></a>旋转方式</h3><p>做时钟首先要把样式给搞定，主要是围绕中心旋转的样式。<br>围绕中心旋转形成等分状态其实有两种做法，假设html样式如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li><p>让li全部定位到pox中心，用css3的旋转rotate让其围绕中心旋转角度，再配合translate偏移，给它一个x轴的偏移量，就变成了围绕中心旋转的样式了：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">.<span class="built_in">box</span> ul&#123;</div><div class="line">    <span class="built_in">width</span>: 200px;</div><div class="line">    <span class="built_in">height</span>: 200px;</div><div class="line">    <span class="built_in">border</span>-<span class="built_in">radius</span>: <span class="number">50</span><span class="symbol">%</span>;</div><div class="line">    <span class="built_in">border</span>:1px solid red;</div><div class="line">    <span class="built_in">position</span>: relative;</div><div class="line">    <span class="built_in">display</span>: inline-<span class="built_in">block</span>;</div><div class="line">    margin: 100px;</div><div class="line">&#125;</div><div class="line">.<span class="built_in">box</span> <span class="built_in">li</span>&#123;</div><div class="line">    <span class="built_in">width</span>: 50px;</div><div class="line">    <span class="built_in">height</span>:50px;</div><div class="line">    <span class="built_in">border</span>:1px solid red;</div><div class="line">    <span class="built_in">border</span>-<span class="built_in">radius</span>: <span class="number">50</span><span class="symbol">%</span>;</div><div class="line">    line-<span class="built_in">height</span>: 48px;</div><div class="line">    text-align: <span class="built_in">center</span>;</div><div class="line">    <span class="built_in">position</span>: absolute;</div><div class="line">    top: <span class="number">50</span><span class="symbol">%</span>;</div><div class="line">    left:<span class="number">50</span><span class="symbol">%</span>;</div><div class="line">    margin: -25px <span class="number">0</span> <span class="number">0</span> -25px;</div><div class="line">    <span class="built_in">transform</span>-<span class="built_in">origin</span>:<span class="number">50</span><span class="symbol">%</span> <span class="number">50</span><span class="symbol">%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">var</span> lists = document.querySelectorAll(<span class="string">".box .pox li"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;lists.<span class="built_in">length</span>;i++)&#123;</div><div class="line">    lists[i].<span class="built_in">style</span>.cssText = `<span class="built_in">transform</span>: rotate($&#123;i*<span class="number">30</span>&#125;deg) <span class="built_in">translate</span>(98px, -<span class="number">50</span><span class="symbol">%</span>);`;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 当然这种旋转非常的简单，但是也有一定的缺陷的，其缺点是文字什么的也一起旋转了，时钟的数字可不能一起旋转了，所以这刻度线什么的用这个简单方便，但是数字得用另一种方式。</p>
</li>
<li>好了万能的数学该来了，用sin和cos实现，我们把父元素所占的空间当成一个坐标轴，其宽的一半当成半径画个圆，如 <code>r = 父元素.offsetHeight/2</code>，其中心坐标点就是(r,r)，<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;ul <span class="keyword">class</span>=<span class="string">"pox2"</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;1&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;2&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;3&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;4&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;5&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;6&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;7&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;8&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;9&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;10&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;11&lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;<span class="keyword">li</span>&gt;12&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> lists2 = document.querySelectorAll(<span class="string">".box .pox2 li"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=0;j&lt;lists2.length;j++)&#123;</div><div class="line">    <span class="keyword">var</span> r = lists2[0].parentNode.offsetHeight/2,</div><div class="line">    angle = j*30/180*Math.PI;</div><div class="line">    x = r + r*Math.<span class="built_in">cos</span>(angle);</div><div class="line">    y = r + r*Math.<span class="built_in">sin</span>(angle);</div><div class="line">    lists2[j].style.cssText = `top:<span class="variable">$&#123;y&#125;</span>px;left:<span class="variable">$&#123;x&#125;</span>px;`;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/18/2.png" alt="sin和cos"><br>其实理解起来也不难，先得到每个li的弧度值，然后根据三角函数计算出li的在坐标轴中的坐标，x轴的坐标为<code>r+r*cosθ</code>,y轴的坐标为<code>r+r*sinθ</code>，这里有点小知识，js的象限是顺时针开始的，初始0度是从时钟的三点方向开始的，和数学的是反着来的，当然你可能不理解，我的图也有点挫，应该画右下角的，你把右下角当成第一象限来理解要好一点，自己画一遍就什么都有了。<br><iframe src="/code/time/surround.html" width="100%" height="350px" frameborder="0" allowfullscreen></iframe><br>好了，准备就绪，开始画时钟了，html结构如下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clock"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"line-min"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"line-hour"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pointer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hour"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"min"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"sec"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>初始表盘css：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span> &#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clock</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#292a38</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">50px</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*指针*/</span></div><div class="line"><span class="selector-class">.pointer</span> <span class="selector-tag">li</span><span class="selector-class">.circle</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform-origin</span>: left center;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">5px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.pointer</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform-origin</span>: left center;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.pointer</span> <span class="selector-tag">li</span><span class="selector-class">.hour</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">45px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">3px</span>;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.pointer</span> <span class="selector-tag">li</span><span class="selector-class">.min</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">60px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">2px</span>;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.pointer</span> <span class="selector-tag">li</span><span class="selector-class">.sec</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>.line-min</code>是分刻度线，<code>.line-hour</code>是小时刻度线，<code>.number</code>是1-12的时间数字，<code>.hour</code>是时针，<code>.min</code>分针，<code>.sec</code>秒针，<code>.circle</code>中心圆点。<br>这次我们用ES6的class来写吧,先定义一个Time类，后面的方法都是写在Time类里面的，Time里面的构造方法constructor调用初始化函数init，init就先空着吧。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> time = <span class="class"><span class="keyword">class</span> <span class="title">Time</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">		<span class="keyword">this</span>.init();</div><div class="line">	&#125;</div><div class="line">    init()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了写得方便点，我们先建立两个工具函数，addcss函数是向传入的dom中添加css样式，getclass是根据传入的css获取dom节点：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">addcss(obj,mycss)&#123;</div><div class="line">    obj.style.cssText = mycss;</div><div class="line">&#125;</div><div class="line">getclass(cls)&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.<span class="built_in">querySelector</span>(cls);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们先来画时钟刻度线，用第一种旋转方式：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">drawLines(wrap, <span class="keyword">total</span>, translateX)&#123;			<span class="comment">//绘制刻度线</span></div><div class="line">    <span class="keyword">var</span> gap = 360/<span class="keyword">total</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=0;i&lt;<span class="keyword">total</span>;i++)&#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">li</span> = document.createElement('<span class="keyword">li</span>');</div><div class="line">        this.addcss(<span class="keyword">li</span>,`transform:<span class="keyword">rotate</span>(<span class="variable">$&#123;i</span>*gap&#125;deg) <span class="keyword">translate</span>(<span class="variable">$&#123;translateX&#125;</span>px,-50%)`);</div><div class="line">        wrap.<span class="keyword">append</span>(<span class="keyword">li</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>补上刻度css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.line-hour</span> <span class="selector-tag">li</span>,</div><div class="line"><span class="selector-class">.line-min</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform-origin</span>: left center;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.line-hour</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.line-min</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">5px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们用drawLines函数绘制刻度线，分别传入wrap（父节点），total（时钟的刻度个数，时针12个，分针是60个），translateX（第一种旋转方式x轴的偏移量），这个函数生成了刻度线li，并且添加css样式后放到了传入的父节点中。</p>
<p>然后我们再绘制时钟数字，当然数字可不能旋转，所以得用第二种旋转方式：<br>由于初始度数是0，刚好是3点，所以3对应的弧度应该是0,6点是π/2，9点是π，12点是3π/2，通过传入的数字得到其对应的弧度如下：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    时钟            角度     弧度      sin          cos</div><div class="line"><span class="string">//</span> 3<span class="function">:x</span><span class="function">:2r</span>,y<span class="function">:r</span>; 	     0	     0       sin 0        cos 1</div><div class="line"><span class="string">//</span> 6<span class="function">:x</span><span class="function">:r</span>,y<span class="function">:2r</span>;	     90	    π<span class="string">/2</span>      sin 1        cos 0</div><div class="line"><span class="string">//</span> 9<span class="function">:x</span><span class="function">:0</span>,y<span class="function">:r</span>;	     180     π       sin 0        cos -1</div><div class="line"><span class="string">//</span> 12<span class="function">:x</span><span class="function">:r</span>,y<span class="function">:0</span>;	     270    3π<span class="string">/2</span>     sin -1       cos 0</div><div class="line">我们把弧度全部除以π得到</div><div class="line"><span class="string">//</span> 3   0;	=   3-3 = 0/6			<span class="params">(num-3)</span><span class="string">/6</span> * π</div><div class="line"><span class="string">//</span> 6   1/2;	=   6-3 = 3/6</div><div class="line"><span class="string">//</span> 9   1;	=   9-3 = 6/6</div><div class="line"><span class="string">//</span> 12  3/2;	=   12-3 = 9/6</div></pre></td></tr></table></figure></p>
<p>我们可以推算出公式为<code>(num-3)/6 * π</code>，故弧度为 = <code>(i-3)/6*Math.PI</code>;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">drawNumbers(wrap)&#123;							<span class="comment">//绘制数字时间</span></div><div class="line">    <span class="keyword">var</span> r = wrap.offsetHeight/<span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> child = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</div><div class="line">        <span class="keyword">var</span>  angle = (i<span class="number">-3</span>)/<span class="number">6</span>*<span class="built_in">Math</span>.PI;</div><div class="line">        <span class="keyword">var</span> myX = r + r*<span class="built_in">Math</span>.cos(angle),  <span class="comment">// x=r+rcos(θ)</span></div><div class="line">        myY = r + r*<span class="built_in">Math</span>.sin(angle);     <span class="comment">// y=r+rsin(θ)</span></div><div class="line">        child+=<span class="string">`&lt;li style="left:<span class="subst">$&#123;myX&#125;</span>px;top:<span class="subst">$&#123;myY&#125;</span>px;"&gt;<span class="subst">$&#123;i&#125;</span>&lt;/li&gt;`</span>;</div><div class="line">    &#125;</div><div class="line">    wrap.innerHTML = child;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数字css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.number</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">height</span>: <span class="number">140px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">140px</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">	<span class="attribute">font-family</span>: <span class="string">'Microsoft Yahei'</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">15px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.number</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样数字函数也完成了，接下来我们在init初始化函数里面调用，new time()，让其生成出来：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">init()&#123;</div><div class="line">    <span class="keyword">this</span>.drawLines(<span class="keyword">this</span>.getclass(<span class="string">'.line-min'</span>), <span class="number">60</span>, <span class="number">85</span>);</div><div class="line">    <span class="keyword">this</span>.drawLines(<span class="keyword">this</span>.getclass(<span class="string">'.line-hour'</span>), <span class="number">12</span>, <span class="number">80</span>);</div><div class="line">    <span class="keyword">this</span>.drawNumbers(<span class="keyword">this</span>.getclass(<span class="string">'.number'</span>));</div><div class="line">&#125;</div><div class="line">new time();</div></pre></td></tr></table></figure></p>
<p>我们就得到了时钟的大致样式了，只是时钟的针还不会走：<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/18/3.png" alt="时钟"><br>最后我们写个move函数让时钟开始走动<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">move()&#123;</div><div class="line">    <span class="keyword">var</span> h = <span class="keyword">this</span>.getclass(<span class="string">'.hour'</span>),</div><div class="line">    m = <span class="keyword">this</span>.getclass(<span class="string">'.min'</span>),</div><div class="line">    s = <span class="keyword">this</span>.getclass(<span class="string">'.sec'</span>);</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(),</div><div class="line">        hour = now.getHours(),</div><div class="line">        min = now.getMinutes(),   </div><div class="line">        sec = now.getSeconds();</div><div class="line">        <span class="keyword">var</span> hangle = <span class="number">30</span>*hour + <span class="number">0.5</span>*min <span class="number">-90</span>,</div><div class="line">        mangle = <span class="number">6</span>*min + <span class="number">0.1</span>*sec <span class="number">-90</span>,</div><div class="line">        sangle = <span class="number">6</span>*sec <span class="number">-90</span>;</div><div class="line">        <span class="keyword">this</span>.addcss(h,<span class="string">`transform:rotate(<span class="subst">$&#123;hangle&#125;</span>deg)`</span>);</div><div class="line">        <span class="keyword">this</span>.addcss(m,<span class="string">`transform:rotate(<span class="subst">$&#123;mangle&#125;</span>deg)`</span>);</div><div class="line">        <span class="keyword">this</span>.addcss(s,<span class="string">`transform:rotate(<span class="subst">$&#123;sangle&#125;</span>deg)`</span>);</div><div class="line">    &#125;.bind(<span class="keyword">this</span>),<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其余的可能没啥问题，只有指针的角度计算这里可能要说一下，<br>小时是12个小时，所以1个小时=360°/12=30°，当然还要加上分钟的偏移，一个小时60分钟，60分钟就要偏移30°，所以1分钟为0.5°，故小时=<code>30*小时+0.5*分钟</code>，当然也可以计算秒的，但是太小了(1/120)，这里就忽略不计了，分针和秒针同上。由于初始位置是3点那里，以3点为基准，故3点旋转角度为0°，1点为-60°，6点为90°，故所有角度应该减去90°再进行旋转。init()里面调用：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">init()&#123;</div><div class="line">    <span class="keyword">this</span>.drawLines(<span class="keyword">this</span>.getclass(<span class="string">'.line-min'</span>), <span class="number">60</span>, <span class="number">85</span>);</div><div class="line">    <span class="keyword">this</span>.drawLines(<span class="keyword">this</span>.getclass(<span class="string">'.line-hour'</span>), <span class="number">12</span>, <span class="number">80</span>);</div><div class="line">    <span class="keyword">this</span>.drawNumbers(<span class="keyword">this</span>.getclass(<span class="string">'.number'</span>));</div><div class="line">    <span class="keyword">this</span>.move();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<iframe src="/code/time/time.html" width="100%" height="350px" frameborder="0" allowfullscreen></iframe>
<p>ok，一个简单的时钟就完成了。</p>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/tree/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/time" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/18/1.png&quot; alt=&quot;时间-时钟&quot;&gt;&lt;br&gt;这天是越来越冷了，人也越发的懒起来，早上起来简直要老命，下班回去也只想进被子里面，游戏都不想打了╮（﹀_﹀）
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="css3" scheme="http://xuxin123.com/tags/css3/"/>
    
      <category term="时间" scheme="http://xuxin123.com/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="时钟" scheme="http://xuxin123.com/tags/%E6%97%B6%E9%92%9F/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的padding</title>
    <link href="http://xuxin123.com/2017/12/16/padding/"/>
    <id>http://xuxin123.com/2017/12/16/padding/</id>
    <published>2017-12-16T09:40:22.000Z</published>
    <updated>2017-12-23T07:53:34.091Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/16/1.png" alt="你不知道的padding"><br>标题党当上瘾了，讲完margin又来padding，继续继续。<br>其实padding要比margin简单得多，说是不知道的padding，不如说是padding应用的一些小技巧，不要小看这些小东西，虽然有很多代替的方案，但是就用一点点css就解决了问题，何乐而不为呢，网页上的东西能用css解决的就尽量不要用js了。<br>首先padding是没有负值的，想着负padding的同学可能要失望了，可以理解，内边距嘛，补白还能有负的？其实padding的功能很简单，就是填充。宽高不够，填充一下；背景不够，填充一下。</p>
<h3 id="用Margin还是用Padding"><a href="#用Margin还是用Padding" class="headerlink" title="用Margin还是用Padding"></a>用Margin还是用Padding</h3><p>这可以算做是党争了吧(<del>tab党和空格党表示不服</del>)，其实什么时候用很简单，只是浏览时若你想在外侧添加空白且空白处不需要背景，用margin，否则用padding。当需要js触发事件时你想点击（或者其它操作）元素外面空白没有事件发生，用margin，需要发生事件用padding。<br>其实区别很简单，margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。<br>譬如margin垂直外边距合并如果用padding的话则不会出现合并问题，在视觉上与margin一样，当然前提是你不设置背景，也不需要精确的在这个元素上（准确说是盒模型的content）触发一些js事件。<br>好了，该讲一些关于padding的应用了。</p>
<h3 id="Padding背景图片自适应"><a href="#Padding背景图片自适应" class="headerlink" title="Padding背景图片自适应"></a>Padding背景图片自适应</h3><p>其实这个大多数应用于移动端，当然pc也能用，在设置背景图片或者说一张自适应的图片，为了不让其变形，一般宽度或者高度只设置其一，让其自适应显示，图片是等比缩放的，不会发生形变。<br>我们布局时多数是设置其宽度让其自适应显示，但是这个东西有个缺点，图片加载不是瞬间完成的，尤其是网速较慢时，图片要等一段时间才会出来，而且图片可能会出现加载失败的情况，这回导致我们的布局变得混乱，原本放图片的位置会有其它元素顶上来。<br>说到这里，肯定是用padding解决啦，当然有人可能会好奇，padding怎么解决呀。<br>我们写padding的时候值可以是length（数字），也可以是%（百分比），重点就是这个百分比了，百分比是基于父元素的宽度的百分比的内边距。也就是说你父元素的宽度是100px；子元素的padding-top:100%;那么这个100%就是<code>100px*100%</code>。ok，如果知道图片的<code>图片高度/图片宽度</code>这个比例的话那么这个比例乘以图片宽度就能得到图片的自适应的高度了。<br>简单来说就是知道图片的<code>图片高度/图片宽度</code>*图片自适应的宽度，那么自适应的高度也就出来了，所以我们可以用padding-top把这个高度提前占位。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.main&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line">.box&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">padding-top</span>: <span class="number">56.25%</span>;    <span class="comment">/*图片高度/图片宽度*100%*/</span></div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> img&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"main"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;</div><div class="line">        &lt;<span class="selector-tag">img</span> src=<span class="string">""</span>/&gt;			</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>上面的图片自适应宽为500px;我们计算出图片的高/宽比例，然后用padding-top:这个比例，实例为500px*高/宽，那么图片在500px宽下面的实际高度也就是这个数值，图片没加载出来的时候padding-top占据了这个高度，加载出来后正常显示。</p>
<p>当然，不只是用img可以这样显示，用背景图片也可以的：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.main&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"> <span class="selector-class">.figure</span> &#123;</div><div class="line">        <span class="attribute">padding-top</span>:<span class="number">56.25%</span>; <span class="comment">/*图片高度/图片宽度*100%*/</span></div><div class="line">        <span class="attribute">background</span>: url(<span class="string">"http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg3.jpg"</span>) no-repeat;</div><div class="line">        <span class="attribute">background-size</span>:cover;</div><div class="line">        <span class="attribute">background-position</span>:center;		         </div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"main"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"column"</span>&gt;</div><div class="line">            &lt;<span class="selector-tag">div</span> class=<span class="string">"figure"</span> &gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<iframe src="/code/padding.html" width="100%" height="800px" frameborder="0" allowfullscreen></iframe>
<p>想要一行自适应的正方形，再配合text-align:justify;多列均匀布局，可以达到这样的效果:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">.mybox&#123;</div><div class="line">    width: <span class="number">100</span>%;</div><div class="line">    height: <span class="number">300</span>px;</div><div class="line">    <span class="built_in">text</span>-align: justify;</div><div class="line">    <span class="built_in">text</span>-justify: inter-ideograph;  </div><div class="line">    padding: <span class="number">10</span>%;  </div><div class="line">    box-sizing: border-box;</div><div class="line">&#125;</div><div class="line">.mybox:<span class="keyword">after</span>&#123;</div><div class="line">        content: '';</div><div class="line">        width: <span class="number">100</span>%;</div><div class="line">        position: relative;</div><div class="line">        display: inline-block;</div><div class="line">&#125;</div><div class="line">.mybox .box&#123;</div><div class="line">    width: <span class="number">12.5</span>%;</div><div class="line">    background: red;</div><div class="line">    display: inline-block;</div><div class="line">    position:relative;    </div><div class="line">&#125;</div><div class="line">.box:<span class="keyword">before</span>&#123;</div><div class="line">        content: '';</div><div class="line">        padding-top: <span class="number">100</span>%;</div><div class="line">        box-sizing: border-box;   </div><div class="line">        display: block;</div><div class="line">        width: <span class="number">0</span>;  </div><div class="line">    &#125;</div><div class="line">.pox&#123;                </div><div class="line">    position:absolute;</div><div class="line">    height:<span class="number">100</span>%;</div><div class="line">    width:<span class="number">100</span>%;</div><div class="line">    left: <span class="number">0</span>;</div><div class="line">    top: <span class="number">0</span>;         </div><div class="line">    border: <span class="number">1</span>px solid red;</div><div class="line">    box-sizing: border-box;</div><div class="line">&#125;</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"mybox"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"box"</span>&gt;&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pox"</span>&gt;&lt;/<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"box"</span>&gt;&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pox"</span>&gt;&lt;/<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"box"</span>&gt;&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pox"</span>&gt;&lt;/<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"box"</span>&gt;&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pox"</span>&gt;&lt;/<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"box"</span>&gt;&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pox"</span>&gt;&lt;/<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<iframe src="/code/padding2.html" width="100%" height="330px" frameborder="0" allowfullscreen></iframe>
<p>在pc端改变窗口宽度试试。</p>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/tree/master/CSS/padding" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/16/1.png&quot; alt=&quot;你不知道的padding&quot;&gt;&lt;br&gt;标题党当上瘾了，讲完margin又来padding，继续继续。&lt;br&gt;其实padding要比m
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://xuxin123.com/tags/css/"/>
    
      <category term="选项卡" scheme="http://xuxin123.com/tags/%E9%80%89%E9%A1%B9%E5%8D%A1/"/>
    
      <category term="margin" scheme="http://xuxin123.com/tags/margin/"/>
    
      <category term="padding" scheme="http://xuxin123.com/tags/padding/"/>
    
      <category term="移动端图片自适应" scheme="http://xuxin123.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的margin</title>
    <link href="http://xuxin123.com/2017/12/15/margin/"/>
    <id>http://xuxin123.com/2017/12/15/margin/</id>
    <published>2017-12-15T08:10:13.000Z</published>
    <updated>2017-12-23T07:52:52.342Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/15/1.png" alt="选项卡"><br>当了一回标题党了(<del>震惊！99%的人都不知道XXXX &lt;(￣︶￣)&gt;</del>)，本文是对我所了解的margin的一些说明，希望能给大家带来些许有意思的知识。<br>margin和padding是css中应用最多的了吧，没有之一，这两兄弟帮我们解决了一个又一个的布局问题。好了，来看看margin的一些应用吧。</p>
<h3 id="何为margin"><a href="#何为margin" class="headerlink" title="何为margin"></a>何为margin</h3><p>来看看官方的说明:</p>
<blockquote>
<p>边界，元素周围生成额外的空白区。“空白区”通常是指其他元素不能出现且父元素背景可见的区域。——CSS权威指南</p>
<p>CSS 边距属性定义元素周围的空间。通过使用单独的属性，可以对上、右、下、左的外边距进行设置。也可以使用简写的外边距属性同时改变所有的外边距。——W3School</p>
</blockquote>
<p>margin就是盒模型的外边距，它最基本用途就是控制元素周围空间的间隔，把一个个元素分隔开来。margin始终是透明的。</p>
<h3 id="垂直外边距合并问题"><a href="#垂直外边距合并问题" class="headerlink" title="垂直外边距合并问题"></a>垂直外边距合并问题</h3><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>
<p>其实这个问题一般常见于父元素和子元素，第一个子元素的margin-top会顶开父元素与父元素相邻元素的间距，其原因是第一个子元素的margin-top和父元素的margin-top没有东西与其分隔开来，导致了两者的margin-top重合了。<br>简单点说就是：父元素的第一个子元素的上边距margin-top如果碰不到有效的东西如border或者padding将两者的margin-top阻隔，就会不断一层一层的找自己祖先元素的麻烦，直到有隔断的东西，或者找到了最终的父元素。<br>当然解决办法太多了：</p>
<ol>
<li>其子元素浮动、inline-block、绝对定位;</li>
<li>父元素建立BFC（float（除了none）、overflow（除了visible）、display（table-cell/table-caption/inline-block）、position（除了static/relative）），大家常用的overflow: hidden;来解决就是这个做法。</li>
<li>父元素和子元素隔断两者的margin-top，也就是父元素添加:after，padding-top，border-top，总之能隔断就行</li>
</ol>
<h3 id="负margin"><a href="#负margin" class="headerlink" title="负margin"></a>负margin</h3><p>首先盒模型的大小等于盒子的border+padding+正margin，负margin是不会影响其大小的。<br>那么负margin有啥用呢？负margin主要是让元素脱离自身的位置发生移动，当元素margin的top和left是负值时会引起元素的向上或向左位置移动（当然元素移动了，会导致后面的元素一起动）。而当元素margin的bottom和right是负值时会影响右边和下边相邻元素的参考线（比如margin-bottom: -100px;会让它下面挨着的元素上移100px）。<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/15/2.gif" alt="负margin"></p>
<h5 id="负margin的应用："><a href="#负margin的应用：" class="headerlink" title="负margin的应用："></a>负margin的应用：</h5><ol>
<li><p>悬停图片放大<br>其实这个东西有很多人是用<code>transform: scale()</code>来做的，让图片放大，但是这个其实也可以用负margin来做，让img宽高变大然后通过负margin让其中心位置不变，当然这个兼容性特好，不追求动画效果的话ie7都没啥问题的。<br><style>.box{margin: 50px;width: 200px;height: 200px;border: 1px solid #000;overflow: hidden;}.article-entry img.pox{max-width:inherit;width: 200px;height: 200px;margin:0;<br>background-color: red;transition: all 0.4s ease; vertical-align: top;}.box:hover .pox{margin: -25px 0 0 -25px!important;width:  250px!important;height: 250px!important;}.box a{display: block;height: 100%;width: 100%;}</style><br><div class="box"><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg1.jpg" alt="" class="pox"></div></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">img</span> src=<span class="string">"http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg1.jpg"</span> alt=<span class="string">""</span>  class=<span class="string">"pox"</span>/&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">.box&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line">.pox&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.4s</span> ease; </div><div class="line">    <span class="attribute">vertical-align</span>: top;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span>:hover .pox&#123;</div><div class="line">    <span class="attribute">margin</span>: -<span class="number">25px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">25px</span>;</div><div class="line">    <span class="attribute">width</span>:  <span class="number">250px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>选项卡<br>负margin是可以用作于特殊样式的选项卡的，而且负margin可以实现border重叠，也就是两个紧挨着的1px border可以用margin-left:-1px让其重叠，变成1px的border，下面的选项卡就只是使用负margin达到了效果，当然还有很多种方式可以实现，但是这种方式简单快捷，ie7什么的不在话下。</p>
<iframe src="/code/margin.html" width="100%" height="230px" frameborder="0" allowfullscreen></iframe>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span><span class="selector-class">.list</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">38px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f8f8f8</span>;</div><div class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">1px</span>;            </div><div class="line">&#125;</div><div class="line"><span class="selector-id">#list</span> <span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">99px</span>; </div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> <span class="number">#e5e5e5</span> solid;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> <span class="number">#e5e5e5</span> solid;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#list</span> <span class="selector-class">.active</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#FFf</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>绝对定位效果<br>负margin是可以达到绝对定位的视觉效果的，但是有要注意：负margin的重叠的话背景会被正常元素覆盖，ie7则相反。<br><style>.mybox{width:200px;height:112px}.mybox img{width:100%;height:100%}.mybox span{margin-top:-100px;display:block;color:#FFF;text-align:right;margin-right:10px}</style><br><div class="mybox"><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg1.jpg" alt=""><span>特大喜讯</span></div></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mybox</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">112px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mybox</span> <span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mybox</span> <span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">100px</span>;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span>;</div><div class="line">    <span class="attribute">text-align</span>:right;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自适应布局<br>当然，负margin最出名的应用还是自适应上的。<br>双飞翼布局：<br><style>.wrapper{color:#fff}.col{float:left}.myheader{height:50px;background-color:#666;color:#fff;line-height:50px;text-align:center}.main{width:100%;background-color:#555}.main-wrap{margin:0 100px 0 100px;height:200px}.left{width:100px;height:200px;margin-left:-100%;background-color:#999}.right{width:100px;height:200px;margin-left:-100px;background-color:#999}.footer{height:50px;background-color:#666;color:#fff}.clearfix{overflow:hidden}</style><br><div class="myheader clearfix">header </div><div class="wrapper clearfix"><div class="main col"><div class="main-wrap">main </div></div><div class="left col">left </div><div class="right col">right </div></div><div class="footer">footer</div></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div><div class="line"><span class="selector-class">.col</span> &#123;<span class="attribute">float</span>: left;&#125;</div><div class="line"><span class="selector-class">.header</span> &#123;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background-color</span>: <span class="number">#666</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">line-height</span>: <span class="number">50px</span>;<span class="attribute">text-align</span>: center;&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">background-color</span>: <span class="number">#555</span>;&#125;</div><div class="line"><span class="selector-class">.main-wrap</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span> <span class="number">0</span> <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">margin-left</span>: -<span class="number">100%</span>;<span class="attribute">background-color</span>: <span class="number">#999</span>;&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">margin-left</span>: -<span class="number">100px</span>;<span class="attribute">background-color</span>: <span class="number">#999</span>;&#125;</div><div class="line"><span class="selector-class">.footer</span> &#123;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background-color</span>: <span class="number">#666</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div><div class="line"><span class="selector-class">.clearfix</span>::after&#123;<span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">visibility</span>:hidden;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:hidden;&#125;</div><div class="line"></div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"myheader clearfix"</span>&gt;		  		</div><div class="line">	header</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"wrapper clearfix"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"main col"</span>&gt;</div><div class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"main-wrap"</span>&gt;</div><div class="line">            main</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"left col"</span>&gt;</div><div class="line">        <span class="attribute">left</span></div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"right col"</span>&gt;</div><div class="line">        <span class="attribute">right</span></div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"footer"</span>&gt;footer&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>圣杯布局：</p>
<p><style>.wrapper2{padding:0 100px 0 100px;color:#fff}.col2{position:relative;float:left}.header2{height:50px;background-color:#666;color:#fff;text-align:center;line-height:50px}.main2{width:100%;height:200px;background-color:#555}.left2{width:100px;height:200px;margin-left:-100%;left:-100px;background-color:#999}.right2{width:100px;height:200px;margin-left:-100px;right:-100px;background-color:#999}</style></p>
<p><div class="myheader clearfix">header </div><div class="wrapper2 clearfix"><div class="main2 col2">main </div><div class="left2 col2">left </div><div class="right2 col2">right </div></div><div class="footer">footer</div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper2</span> &#123;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span> <span class="number">0</span> <span class="number">100px</span>; <span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div><div class="line">.col2&#123;<span class="attribute">position</span>: relative;<span class="attribute">float</span>: left;&#125;</div><div class="line"><span class="selector-class">.myheader</span> &#123;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background-color</span>: <span class="number">#666</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">text-align</span>: center;<span class="attribute">line-height</span>: <span class="number">50px</span>;&#125;</div><div class="line"><span class="selector-class">.main2</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">background-color</span>: <span class="number">#555</span>;&#125;</div><div class="line"><span class="selector-class">.left2</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">margin-left</span>: -<span class="number">100%</span>;<span class="attribute">left</span>: -<span class="number">100px</span>;<span class="attribute">background-color</span>: <span class="number">#999</span>;&#125;</div><div class="line"><span class="selector-class">.right2</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">margin-left</span>: -<span class="number">100px</span>;<span class="attribute">right</span>: -<span class="number">100px</span>;<span class="attribute">background-color</span>: <span class="number">#999</span>;&#125;</div><div class="line"><span class="selector-class">.footer</span> &#123;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background-color</span>: <span class="number">#666</span>; <span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div><div class="line"><span class="selector-class">.clearfix</span>::after&#123;<span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">visibility</span>:hidden;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:hidden;&#125;</div><div class="line"></div><div class="line"> &lt;<span class="selector-tag">div</span> class=<span class="string">"myheader clearfix"</span>&gt;</div><div class="line">    header</div><div class="line"> &lt;/div&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"wrapper2 clearfix"</span>&gt;</div><div class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"main2 col2"</span>&gt;</div><div class="line">            main</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"left2 col2"</span>&gt;</div><div class="line">            <span class="attribute">left</span></div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;<span class="selector-tag">div</span> class=<span class="string">"right2 col2"</span>&gt;</div><div class="line">            <span class="attribute">right</span></div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"footer"</span>&gt;footer&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="margin配合定位绝对居中"><a href="#margin配合定位绝对居中" class="headerlink" title="margin配合定位绝对居中"></a>margin配合定位绝对居中</h3><p>margin还可以配合绝对定位实现绝对居中的功能</p>
<p><style>.box3{width:400px;height:400px;background-color:#e5e5e5;position:relative}.pox3{width:100px;height:100px;background-color:#000;margin:auto;position:absolute;top:0;left:0;bottom:0;right:0}</style></p>
<p><div class="box3"><div class="pox3"></div></div><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> .box&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line">.pox&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">    <span class="attribute">margin</span>: auto;  </div><div class="line">    <span class="attribute">position</span>: absolute;  </div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;  </div><div class="line">&#125;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;</div><div class="line">       &lt;<span class="selector-tag">div</span> class=<span class="string">"pox"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>ok，这就是我所认识的margin，可能有所遗漏，不过暂时也记不得了，后面再补充，下一篇准备padding吧。<br>本文代码地址:<a href="https://github.com/xuxingeren/blog/tree/master/CSS/margin" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/15/1.png&quot; alt=&quot;选项卡&quot;&gt;&lt;br&gt;当了一回标题党了(&lt;del&gt;震惊！99%的人都不知道XXXX &amp;lt;(￣︶￣)&amp;gt;&lt;/del&gt;)，本文是对
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://xuxin123.com/tags/css/"/>
    
      <category term="负margin" scheme="http://xuxin123.com/tags/%E8%B4%9Fmargin/"/>
    
      <category term="自适应左右布局" scheme="http://xuxin123.com/tags/%E8%87%AA%E9%80%82%E5%BA%94%E5%B7%A6%E5%8F%B3%E5%B8%83%E5%B1%80/"/>
    
      <category term="选项卡" scheme="http://xuxin123.com/tags/%E9%80%89%E9%A1%B9%E5%8D%A1/"/>
    
      <category term="margin" scheme="http://xuxin123.com/tags/margin/"/>
    
  </entry>
  
  <entry>
    <title>text-align:justify;</title>
    <link href="http://xuxin123.com/2017/12/13/justify/"/>
    <id>http://xuxin123.com/2017/12/13/justify/</id>
    <published>2017-12-13T09:45:22.000Z</published>
    <updated>2017-12-16T03:25:19.516Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/13/1.png" alt="text-align:justify"><br>text-align，这东西主要应用于实现两端对齐文本效果，当我们有大篇幅的文本内容时，文字换行会出现文本两端不居中的情况。如图：</p>
<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/13/1.png" alt="text-align:justify"></p>
<p>我们想让其美观一点，在其文本标签加上<code>text-align:justify</code>文字就实现了两端对其了，当然，这个兼容性还是挺不错的，ie的话再加上<code>text-justify: inter-ideograph</code>基本上都能实现对其，但是也有一些怪异的情况，比如在手机上一些手机自带的浏览器，还有uc浏览器(<del>手机浏览器中的ie</del>)是不生效的，我还得再加上<code>word-break: break-all</code>告诉浏览器我们要进行断句了，让其允许在单词内换行，这样也就实现了对齐了。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">text-align</span>: justify;</div><div class="line">    <span class="attribute">text-justify</span>: inter-ideograph;		</div><div class="line">    <span class="attribute">word-break</span>: break-all;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，<code>text-align:justify</code>如果就这点东西，我也不会专门拿来写这篇博客(<del>能凑凑数还是可以的</del>)，目前很多人在写多列均匀布局都是使用的flex和它的兄弟-webkit-box，用肯定是非常好用，但是最蛋疼的问题是兼容性不是那么的好，移动端加了-webkit-前缀基本上没啥问题，但是ie这个东西是你要做兼容的话是绕不开的，只得放弃好用的了，当然你也可以用table布局，用js计算什么的，当时感觉为了一个均匀布局太不划算了。这时需要我们的主角<code>text-align:justify</code>来当救世主了，巧妙的使用text-align:justify可以实现多列均匀布局，并且兼容性强大，ie6什么的不在话下。<br>许多人直接用<code>text-align:justify</code>时发现并不能实现两端对其，而且有时用jq添加节点时也对其不了，其实要让<code>text-align:justify</code>生效你得满足几个条件才行：<br>首先<code>text-align:justify</code>，顾名思义，其子标签必须是inline-block或者inline，并且它不会处理被打断的行和最后一行。也就是说当你的行数只有一行时，<code>text-align</code>不会生效的，所以我们要处理一下，伪造一个最后一行，让你的行数不是处于最后。可以用父标签的:after进行伪造。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"justify"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一，绝对不意气用事<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二，绝对不漏判任何一件坏事<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第三，绝对裁判的公正漂亮<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.justify</span>&#123;</div><div class="line">    <span class="attribute">text-align</span>: justify;</div><div class="line">    text-justify: inter-ideograph;</div><div class="line">        &#125;</div><div class="line"><span class="selector-class">.justify</span> <span class="selector-class">.item</span>&#123;</div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    *zoom:<span class="number">1</span>;</div><div class="line">    *<span class="attribute">display</span>: inline;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;        </div><div class="line"><span class="selector-class">.justify</span>:after&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: inline-block;				</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是ie8以下可不认这个东西，要兼容ie的话我们可以在父标签html的最后加个ie版本判断的html语句（inline-block也要注意兼容），当时ie8以下时我们显示一个空的文本标签。两者同时运用没啥冲突，基本上完美兼容了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.justify b&#123;</div><div class="line">            display: inline-block;</div><div class="line">            position:relative;</div><div class="line">            height:0px;				</div><div class="line">            width:100%;						</div><div class="line">&#125; </div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"justify"</span>&gt;</span></div><div class="line">		......	</div><div class="line">         <span class="comment">&lt;!--[if lte IE 7]&gt;</span></div><div class="line"><span class="comment">        &lt;b&gt;&lt;/b&gt;</span></div><div class="line"><span class="comment">        &lt;![endif]--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>有时候我们用jq进行动态添加时发现css也用了，怎么还是不能对其，那是因为对其还要有个条件，就是子元素必须要有间隙，不能紧挨着。比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"justify"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>2<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>3<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>4<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">         <span class="comment">&lt;!--[if lte IE 7]&gt;</span></div><div class="line"><span class="comment">        &lt;b&gt;&lt;/b&gt;</span></div><div class="line"><span class="comment">        &lt;![endif]--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这种事不能对齐的，所以在压缩html的时候要注意一下，当然jq动态添加你要留个空格什么的，不然也不能对齐。比如<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>(<span class="string">".justify"</span>).append(<span class="string">"&lt;i&gt;1&lt;/i&gt; "</span>) <span class="comment">//注意括号里面要留空格</span></div></pre></td></tr></table></figure></p>
<p>好了，看个示列吧，ie6没试过，不过两端对齐应该没啥显示问题，js效果的话要ie8哦：<br><iframe src="/code/justify.html" width="100%" height="280px" frameborder="0" allowfullscreen></iframe></p>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/blob/master/CSS/justify.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/13/1.png&quot; alt=&quot;text-align:justify&quot;&gt;&lt;br&gt;text-align，这东西主要应用于实现两端对齐文本效果，当我们有大篇幅的文本内
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://xuxin123.com/tags/css/"/>
    
      <category term="多列均匀布局" scheme="http://xuxin123.com/tags/%E5%A4%9A%E5%88%97%E5%9D%87%E5%8C%80%E5%B8%83%E5%B1%80/"/>
    
      <category term="文字两端对齐" scheme="http://xuxin123.com/tags/%E6%96%87%E5%AD%97%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/"/>
    
      <category term="text-align:justify" scheme="http://xuxin123.com/tags/text-align-justify/"/>
    
  </entry>
  
  <entry>
    <title>css3复选框美化及css3页面滚动</title>
    <link href="http://xuxin123.com/2017/12/05/css3check/"/>
    <id>http://xuxin123.com/2017/12/05/css3check/</id>
    <published>2017-12-05T09:46:20.000Z</published>
    <updated>2017-12-05T10:32:21.682Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/05/1.png" alt="图片加载"><br>css的东西还是更新得快呀。(<del>主要是js比较菜</del>)，这里主要是把checkbox美化一下，radio什么的参考checkbox一样的道理，css能做的东西还是挺多的，虽然不是那么实用，但是选项卡，页面滚动，图片轮播什么的，都可以做，今天的主角就是css3的<code>:checked</code>外加上css3的<code>~</code>和<code>+</code>选择<br><code>:checked</code>是被选中的 input 元素，当这东西后面跟上<code>~</code>和<code>+</code>后，你就可以让选中的input对应的标签做点事情了。<code>~</code> 兄弟选择符，是指选择元素后面的所有兄弟元素，比如a~p就是指a标签后面所有的p标签。<code>+</code> 相邻选择符，是指选择元素后面相邻的兄弟元素，这个只选择一个。</p>
<p>浏览器自带的复选框和单选框的样式简直对不起这网络信息的发展：<br>复选框：<input type="checkbox">&nbsp;&nbsp;单选框&nbsp;&nbsp;<input type="radio" name="aaa">1&nbsp;<input type="radio" name="aaa">2&nbsp;<input type="radio" name="aaa">3</p>
<p>是不是丑出天际了，我们的工作就是把丑的东西改装成美的东西给用户看的，自然少不了各种美化了，先来个checkbox的切换吧：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">label</span> class=<span class="string">"switch"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">div</span> class=<span class="string">"switchbox"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/label&gt;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="selector-tag">input</span>[type=<span class="string">"checkbox"</span>]&#123;</div><div class="line">	<span class="attribute">display</span>: none;</div><div class="line">					 </div><div class="line">&#125;</div><div class="line"> <span class="selector-tag">label</span>.switch&#123;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">width</span>: <span class="number">60px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">        <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">label</span><span class="selector-class">.switch</span> .switchbox&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;				</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">34px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">label</span><span class="selector-class">.switch</span> <span class="selector-tag">input</span>[type=<span class="string">"checkbox"</span>]+<span class="selector-class">.switchbox</span>:after&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dddddd</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</div><div class="line">    <span class="attribute">transform</span>: translateX(<span class="number">0</span>);</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">    <span class="selector-tag">label</span><span class="selector-class">.switch</span> <span class="selector-tag">input</span>[type=<span class="string">"checkbox"</span>]+<span class="selector-class">.switchbox</span>:before&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">' '</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">56px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">26px</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">height</span>: <span class="number">26px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</div><div class="line">    <span class="attribute">transform</span>: scale(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">label</span><span class="selector-class">.switch</span> <span class="selector-tag">input</span>[type=<span class="string">"checkbox"</span>]:checked+.switchbox&#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#4cd964</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">label</span><span class="selector-class">.switch</span> <span class="selector-tag">input</span>[type=<span class="string">"checkbox"</span>]:checked+<span class="selector-class">.switchbox</span>:after&#123;</div><div class="line">    <span class="attribute">transform</span>: translateX(<span class="number">30px</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">label</span><span class="selector-class">.switch</span> <span class="selector-tag">input</span>[type=<span class="string">"checkbox"</span>]:checked+<span class="selector-class">.switchbox</span>:before&#123;</div><div class="line">    <span class="attribute">transform</span>: scale(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们要把丑陋的checkbox给隐藏掉，用label把checkbox包裹住，这样点击label会触发checkbox的选择，然后主要是用:checked+，当checkbox选中后选择switchbox和switchbox的伪元素进行变化，加上一个过渡动画什么的就改装好了，当然其他什么的也是这个原理，css代码太多了，就不一一贴出来了，有兴趣的去看代码链接吧。<br>来看看所有改装的样式：<br><iframe src="/code/check.html" width="100%" height="700px" frameborder="0" allowfullscreen></iframe><br>至于css滚动则是用几个radio，将其opacity设为0;让其透明，然后覆盖在文字上，你点击文字就选中了radio，body只显示当前窗口，超出隐藏，然后通过:checked ~让.main的transform: translateY变化，就达到了滚动的效果;<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">input</span> type=<span class="string">"radio"</span> name=<span class="string">"nav"</span> class=<span class="string">"nav-1"</span> checked=<span class="string">"checked"</span>/&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span>  class=<span class="string">"nav"</span>&gt;首页&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"radio"</span> name=<span class="string">"nav"</span> class=<span class="string">"nav-2"</span>/&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span>  class=<span class="string">"nav"</span>&gt;新闻&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"radio"</span> name=<span class="string">"nav"</span> class=<span class="string">"nav-3"</span>/&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span>  class=<span class="string">"nav"</span>&gt;娱乐&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"radio"</span> name=<span class="string">"nav"</span> class=<span class="string">"nav-4"</span>/&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span>  class=<span class="string">"nav"</span>&gt;音乐&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"radio"</span> name=<span class="string">"nav"</span> class=<span class="string">"nav-5"</span>/&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span>  class=<span class="string">"nav"</span>&gt;其他&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;<span class="selector-tag">section</span> class=<span class="string">"main"</span>&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line"></div><div class="line"> 	<span class="selector-class">.nav-1</span>:checked ~ .main&#123;</div><div class="line">        <span class="attribute">transform</span>: translateY(<span class="number">0%</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.nav-2</span>:checked ~ .main&#123;</div><div class="line">        <span class="attribute">transform</span>: translateY(-<span class="number">100%</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.nav-3</span>:checked ~ .main&#123;</div><div class="line">        <span class="attribute">transform</span>: translateY(-<span class="number">200%</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.nav-4</span>:checked ~ .main&#123;</div><div class="line">        <span class="attribute">transform</span>: translateY(-<span class="number">300%</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.nav-5</span>:checked ~ .main&#123;</div><div class="line">        <span class="attribute">transform</span>: translateY(-<span class="number">400%</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>本文代码地址<a href="https://github.com/xuxingeren/blog/blob/master/CSS/check.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/05/1.png&quot; alt=&quot;图片加载&quot;&gt;&lt;br&gt;css的东西还是更新得快呀。(&lt;del&gt;主要是js比较菜&lt;/del&gt;)，这里主要是把checkbox美化一下，
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css3" scheme="http://xuxin123.com/tags/css3/"/>
    
      <category term="css" scheme="http://xuxin123.com/tags/css/"/>
    
      <category term="css特效" scheme="http://xuxin123.com/tags/css%E7%89%B9%E6%95%88/"/>
    
      <category term="checkbox" scheme="http://xuxin123.com/tags/checkbox/"/>
    
      <category term="radio" scheme="http://xuxin123.com/tags/radio/"/>
    
      <category term="伪元素" scheme="http://xuxin123.com/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    
      <category term="复选框美化" scheme="http://xuxin123.com/tags/%E5%A4%8D%E9%80%89%E6%A1%86%E7%BE%8E%E5%8C%96/"/>
    
      <category term="css3页面滚动" scheme="http://xuxin123.com/tags/css3%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>初探Promise</title>
    <link href="http://xuxin123.com/2017/12/02/promise/"/>
    <id>http://xuxin123.com/2017/12/02/promise/</id>
    <published>2017-12-02T02:04:34.000Z</published>
    <updated>2017-12-05T09:44:34.831Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/12/02/1.png" alt="Promise"></p>
<p>一个星期没更新了，先来个小游戏来放松放松，勇者大战魔王：</p>
<iframe src="/code/promise.html" width="100%" height="750px" frameborder="0" allowfullscreen></iframe>
<p>考验人品的时候到了，反复进攻，看你能几次进攻打败魔王。</p>
<p>上面只是个小例子，如何实现上面的效果呢，这就要说到我们今天的正主了–Promise，Promise译为承诺。在ES6发布时Promise被ES6列为正式规范，成为最重要的特性之一，Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。简单来说就是把一个函数放进去，符合你定的规范，就返回成功回调函数，否则返回失败回调函数。与其说是承诺，这里我更倾向它是先知，它可以预先将未来发生的事，你无需等待最终结果出来，可以继续规划你代码的走向，比如说我们要败魔王，就要先干掉魔王身边的小弟，而你只需要规划好先打小弟，在打魔王就行了。</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>首先我们来看看这个东西到底怎么用<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new <span class="type">Promise</span>( function(resolve, reject) <span class="meta">&#123;...&#125;</span></div></pre></td></tr></table></figure></p>
<p>先看它的语法，它是由new Promise()传入一个带有 resolve 和 reject 两个参数的函数 。<br>我们调用试一试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>emmmmmm……，直接就console了，感觉没啥用，但是我们知道了在Promise的构造函数执行时，传入那个函数会同步执行。<br>在看看文档，哦，Promise相当于一个承诺，当发出承诺时只是一个中立的状态，承诺是有失败和成功的，resolve代表成功，调用resolve时就代表这个承诺成功了，调用reject时就代表这个承诺失败了。原来如此，是要调用resolve和reject来触发状态呀，然后通过这个状态的改变来执行Promise实例上的then、catch方法，new Promise().then(成功调用,失败调用)，new Promise().then(成功调用).catch(失败捕获)，好了继续。</p>
<h4 id="then和catch"><a href="#then和catch" class="headerlink" title="then和catch"></a>then和catch</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">    resolve(<span class="string">'aaa'</span>);</div><div class="line"> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(val);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>嗯，成功的承诺触发了成功的函数了，看看失败的，当然失败的也可以用then的第二个函数调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">    reject(<span class="string">'aaa'</span>);</div><div class="line"> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(val);</div><div class="line"> &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(val+<span class="string">'error'</span>);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>嗯，失败也触发了。这下直观多了，其实上面的catch等同于下面的写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">    reject(<span class="string">'aaa'</span>);</div><div class="line"> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(val);</div><div class="line"> &#125;).then(<span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(val+<span class="string">'error'</span>);</div><div class="line"> &#125;);;</div></pre></td></tr></table></figure></p>
<p>then方法可以返回一个新的Promise实例，因此可以采用链式写法，即then方法后面再调用另一个then方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aaa = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(num&gt;<span class="number">10</span>)&#123;</div><div class="line">            resolve(num);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            reject(<span class="string">'这个小于10'</span>+num)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">aaa(<span class="number">11</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data1</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> aaa(<span class="number">9</span>)</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>promise对象的错误会一直向下抛出，直到被catch所捕获，看下面，也就是说catch先找第一个aaa(9)看看这个是不是失败的承诺，是就打印错误，不是就找第二个aaa(8)，后面同理，也就是catch可以捕获它前面的所有Promise实例的错误，都会找到最先出错的那个，然后捕获。<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">aaa(<span class="number">9</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data1)</span> &#123;</span></div><div class="line">    <span class="keyword">return</span> aaa(<span class="number">8</span>)</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(err)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(err);   </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>其实总的来说Promise层层回调给简化了，用一个承诺的状态来使需要的回调函数调用，可以采用链式写法，避免了回调函数的层层嵌套。<br>比如我们想写三个异步执行的事件，a是2秒后执行，b是1秒，c是3秒，同时跑的话完成顺序肯定是b-&gt;a-&gt;c，但是我想按照a-&gt;b-&gt;c，按顺序执行，那么肯定是a完成后调用b，b完成后再调用c，三个事件嵌套，用Promise我们可以这样做，是不是更直观。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            resolve(<span class="string">'a'</span>);</div><div class="line">        &#125;,<span class="number">2000</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;         </div><div class="line">            resolve(<span class="string">'b'</span>);</div><div class="line">        &#125;,<span class="number">1000</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            resolve(<span class="string">'c'</span>);</div><div class="line">        &#125;,<span class="number">3000</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">a().then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(val+<span class="string">'执行'</span>);</div><div class="line">    <span class="keyword">return</span> b();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(val+<span class="string">'执行'</span>);</div><div class="line">    <span class="keyword">return</span> c();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(val+<span class="string">'执行'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Promise并行"><a href="#Promise并行" class="headerlink" title="Promise并行"></a>Promise并行</h3><p>有时我们想几个异步事件一起执行，但是想一起拿到结果，那么这个结果应该是在最后执行那个事件上完成后获得，但是有些时候我们往往不知道这几个异步事件谁最后完成。Promise.all可以实现这样的功能，说通俗点，就是一群人跑步，当最后一个人跑完了，比赛结束，把每个人跑的结果装在数组里返回。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Promise.<span class="built_in">all</span>([a(),b(),c()]).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;</div><div class="line">        console.<span class="built_in">log</span>(val);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="Promise竞速"><a href="#Promise竞速" class="headerlink" title="Promise竞速"></a>Promise竞速</h3><p>几个异步事件一起执行，我们想有个执行完了就返回，还是一群人跑步，当第一个人跑完了，比赛结束，返回第一个人跑的结果，这就叫竞速，可以用这个写超时。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Promise.race([a(),b(),c()]).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;</div><div class="line">        console.<span class="built_in">log</span>(val);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="resolve-和reject"><a href="#resolve-和reject" class="headerlink" title="resolve()和reject()"></a>resolve()和reject()</h3><p>Promise自身也有resolve()和reject()方法，其做用是给定Promise对象一个确切的状态，也就是Promise.resolve()这是一个成功的承诺，只会调用成功的方法，reject()同理，当然这二者是不能共存的，两个都存在的情况下，后面的会把前面的覆盖。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="built_in">Promise</span>.resolve(<span class="string">"succ"</span>);</div><div class="line"><span class="comment">//var d = Promise.reject("err");</span></div><div class="line">d.then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(val);  <span class="comment">//succ</span></div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err); <span class="comment">//err</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>ok，接下来我们该实践一下了，就拿开头的勇者大战魔王吧：</p>
<h3 id="勇者大战魔王"><a href="#勇者大战魔王" class="headerlink" title="勇者大战魔王"></a>勇者大战魔王</h3><p>首先我们定义三个关卡，关卡里面有骷髅，守卫，魔王<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ul  = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'ul'</span>);  <span class="comment">//装提示文字</span></div><div class="line"><span class="keyword">var</span> monster = [];</div><div class="line"><span class="keyword">var</span> skeleton = [];   <span class="comment">//骷髅堆，能力随机生成</span></div><div class="line"><span class="keyword">var</span> elite = [];      <span class="comment">//守卫堆，能力随机生成</span></div><div class="line"><span class="keyword">var</span> devil = [&#123;attack:<span class="number">200</span>,defense:<span class="number">200</span>,life:<span class="number">300</span>&#125;]; <span class="comment">//魔王，都是魔王了，能力肯定不是像杂兵一样随机了，攻击200，防守200，生命300</span></div></pre></td></tr></table></figure></p>
<p>然后我们写一个批量生成杂兵的函数和一个随机函数<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//批量生成杂兵</div><div class="line">function generate(arr,<span class="built_in">num</span>,<span class="built_in">min</span>,<span class="built_in">max</span>,life,experience)&#123;    //装杂兵的数组，杂兵个数，随机最小值，随机最大值，生命值，经验</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">num</span>;i++)&#123;</div><div class="line">        <span class="built_in">var</span> <span class="built_in">random</span> = Rand(<span class="built_in">min</span>,<span class="built_in">max</span>);</div><div class="line">        arr.<span class="built_in">push</span>(&#123;</div><div class="line">            attack:<span class="built_in">random</span>,</div><div class="line">            defense:<span class="built_in">random</span>,</div><div class="line">            life:life,</div><div class="line">            experience:experience</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> arr;</div><div class="line">&#125;</div><div class="line">//随机函数，根据传入的最大和最小值生成二者之间的随机值。 </div><div class="line">function Rand(Min,Max)&#123;                 </div><div class="line">    <span class="built_in">var</span> Range = Max - Min;   </div><div class="line">    <span class="built_in">var</span> Rand = Math.<span class="built_in">random</span>();   </div><div class="line">    <span class="built_in">return</span>(Min + Math.<span class="built_in">round</span>(Rand * Range));  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>传入参数生成骷髅和守卫，把这三个关卡装入monster中<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">skeleton = generate(skeleton,<span class="number">10</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">50</span>,<span class="number">10</span>);</div><div class="line">elite = generate(elite,<span class="number">3</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">50</span>);</div><div class="line">monster.push(skeleton,elite,devil);</div></pre></td></tr></table></figure></p>
<p>我们创建一个勇者，勇者有他的面板attribute和他的状态state以及他的一系列的经历函数request<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brave = &#123;</div><div class="line">    attribute:&#123;</div><div class="line">        attack:<span class="number">10</span>,</div><div class="line">        defense:<span class="number">4</span>,</div><div class="line">        life:<span class="number">200</span>,</div><div class="line">        experience:<span class="number">0</span>,</div><div class="line">        Grade:<span class="number">0</span>,</div><div class="line">    &#125;,   </div><div class="line">    state:function(state)&#123;</div><div class="line">        <span class="keyword">var</span> text = `勇者$&#123;state&#125;，攻击$&#123;<span class="keyword">this</span>.attribute.attack&#125;,防御$&#123;<span class="keyword">this</span>.attribute.defense&#125;，生命$&#123;<span class="keyword">this</span>.attribute.life&#125;，等级$&#123;<span class="keyword">this</span>.attribute.Grade&#125;`;        </div><div class="line">        addli(text);    <span class="comment">//页面提示文字生成</span></div><div class="line">    &#125;,</div><div class="line">    request:function(obj)&#123;</div><div class="line">        <span class="keyword">var</span> monster = obj.monster;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> monster)&#123;</div><div class="line">            <span class="keyword">var</span> kill;                 <span class="comment">//需要攻击怪物次数</span></div><div class="line">            <span class="keyword">if</span>(Math.random()&gt;<span class="number">0.4</span>)&#123;    <span class="comment">//40%概率致命一击</span></div><div class="line">                <span class="keyword">var</span> sh = <span class="keyword">this</span>.attribute.attack-monster[i].defense;</div><div class="line">                <span class="keyword">if</span>(sh&gt;<span class="number">0</span>)&#123;             <span class="comment">//打怪时是否破防</span></div><div class="line">                    kill = Math.ceil(monster[i].life/sh); </div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    kill = <span class="number">10000</span>;</div><div class="line">                &#125;         </div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">var</span> sh = <span class="keyword">this</span>.attribute.attack*<span class="number">2</span>-monster[i].defense;</div><div class="line">                <span class="keyword">if</span>(sh&gt;<span class="number">0</span>)&#123;</div><div class="line">                    kill = Math.ceil(monster[i].life/sh); </div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    kill = <span class="number">10000</span>;</div><div class="line">                &#125;     </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> Injured = monster[i].attack-<span class="keyword">this</span>.attribute.defense;   <span class="comment">//受到怪物伤害</span></div><div class="line">            <span class="keyword">if</span>(kill===<span class="number">10000</span>)&#123;</div><div class="line">                <span class="keyword">this</span>.attribute.life = <span class="number">0</span>;                              <span class="comment">//打怪不破防生命直接清0  </span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">this</span>.attribute.life =  Injured&gt;<span class="number">0</span>?<span class="keyword">this</span>.attribute.life-(kill*Injured):<span class="keyword">this</span>.attribute.life;    <span class="comment">//打怪后剩余生命</span></div><div class="line">            &#125;</div><div class="line">           </div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.attribute.life&gt;<span class="number">0</span>)&#123;                  <span class="comment">//存活</span></div><div class="line">                <span class="keyword">this</span>.attribute.experience+=monster[i].experience;   <span class="comment">//经验++</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.attribute.experience==<span class="number">50</span>)&#123;                  <span class="comment">//经验50升级，升级后属性提升，有概率大幅度提升              </span></div><div class="line">                    Math.random()&gt;<span class="number">0.4</span>?<span class="keyword">this</span>.attribute.attack = <span class="keyword">this</span>.attribute.attack*<span class="number">2</span>:<span class="keyword">this</span>.attribute.attack = <span class="keyword">this</span>.attribute.attack*<span class="number">3</span>;</div><div class="line">                    Math.random()&gt;<span class="number">0.4</span>?<span class="keyword">this</span>.attribute.defense = <span class="keyword">this</span>.attribute.defense*<span class="number">2</span>:<span class="keyword">this</span>.attribute.defense = <span class="keyword">this</span>.attribute.defense*<span class="number">3</span>;</div><div class="line">                    <span class="keyword">this</span>.attribute.life = <span class="keyword">this</span>.attribute.life+<span class="number">50</span>;   </div><div class="line">                    <span class="keyword">this</span>.attribute.Grade = <span class="keyword">this</span>.attribute.Grade+<span class="number">1</span>;  </div><div class="line">                    <span class="keyword">this</span>.state(<span class="string">'升级'</span>);            </div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.attribute.experience==<span class="number">150</span>)&#123;         <span class="comment">//经验150升级  </span></div><div class="line">                        Math.random()&gt;<span class="number">0.3</span>?<span class="keyword">this</span>.attribute.attack = <span class="keyword">this</span>.attribute.attack*<span class="number">2</span>:<span class="keyword">this</span>.attribute.attack = <span class="keyword">this</span>.attribute.attack*<span class="number">4</span>;</div><div class="line">                        Math.random()&gt;<span class="number">0.3</span>?<span class="keyword">this</span>.attribute.defense = <span class="keyword">this</span>.attribute.defense*<span class="number">2</span>:<span class="keyword">this</span>.attribute.defense = <span class="keyword">this</span>.attribute.defense*<span class="number">4</span>;</div><div class="line">                        <span class="keyword">this</span>.attribute.life = <span class="keyword">this</span>.attribute.life+<span class="number">100</span>;</div><div class="line">                        <span class="keyword">this</span>.attribute.Grade = <span class="keyword">this</span>.attribute.Grade+<span class="number">1</span>; </div><div class="line">                        <span class="keyword">this</span>.state(<span class="string">'升级'</span>);                  </div><div class="line">                    &#125; </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.attribute.experience==<span class="number">250</span>)&#123;         <span class="comment">//经验250升级  </span></div><div class="line">                            Math.random()&gt;<span class="number">0.2</span>?<span class="keyword">this</span>.attribute.attack = <span class="keyword">this</span>.attribute.attack*<span class="number">2</span>:<span class="keyword">this</span>.attribute.attack = <span class="keyword">this</span>.attribute.attack*<span class="number">5</span>;</div><div class="line">                            Math.random()&gt;<span class="number">0.2</span>?<span class="keyword">this</span>.attribute.defense = <span class="keyword">this</span>.attribute.defense*<span class="number">2</span>:<span class="keyword">this</span>.attribute.defense = <span class="keyword">this</span>.attribute.defense*<span class="number">5</span>;</div><div class="line">                            <span class="keyword">this</span>.attribute.life = <span class="keyword">this</span>.attribute.life+<span class="number">150</span>;</div><div class="line">                            <span class="keyword">this</span>.attribute.Grade = <span class="keyword">this</span>.attribute.Grade+<span class="number">1</span>; </div><div class="line">                            <span class="keyword">this</span>.state(<span class="string">'升级'</span>);             </div><div class="line">                    &#125;</div><div class="line">                obj.success(<span class="keyword">this</span>.state.bind(<span class="keyword">this</span>));        <span class="comment">//击杀成功后显示勇者状态</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                obj.error(<span class="keyword">this</span>.state.bind(<span class="keyword">this</span>));          <span class="comment">//生命归0后显示勇者状态</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们用Promise传入怪物名称，怪物属性，打赢后的回调函数，失败后的回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Raiders = <span class="function"><span class="keyword">function</span>(<span class="params">arr,name</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;      </div><div class="line">            brave.request(&#123;</div><div class="line">                name:name,</div><div class="line">                monster:arr,</div><div class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> text = <span class="string">`攻略<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>成功`</span>;</div><div class="line">                    addli(text);</div><div class="line">                    fn(<span class="string">'状态'</span>);</div><div class="line">                    resolve();</div><div class="line">                &#125;,</div><div class="line">                error:<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;                    </div><div class="line">                    fn(<span class="string">'状态'</span>);</div><div class="line">                    reject(<span class="keyword">this</span>.name);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//生成提示文字</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addli</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);   </div><div class="line">    li.innerText = text;</div><div class="line">    ul.appendChild(li);</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ok，万事具备了，勇者开始进攻：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> &lt;button onclick=<span class="string">"aaa()"</span>&gt;进攻&lt;/button&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span>&#123;</span></div><div class="line">    ul.innerHTML = <span class="string">''</span>;</div><div class="line">    brave.attribute = &#123;</div><div class="line">        attack:<span class="number">10</span>,</div><div class="line">        defense:<span class="number">4</span>,</div><div class="line">        life:<span class="number">200</span>,</div><div class="line">        experience:<span class="number">0</span>,</div><div class="line">        Grade:<span class="number">0</span>,</div><div class="line">    &#125;;</div><div class="line">    Raiders(monster[<span class="number">0</span>],<span class="string">'骷髅'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></div><div class="line">    <span class="keyword">return</span> Raiders(monster[<span class="number">1</span>],<span class="string">'守卫'</span>);</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></div><div class="line">    <span class="keyword">return</span> Raiders(monster[<span class="number">2</span>],<span class="string">'魔王'</span>);</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></div><div class="line">    var text = `成功击败魔王`;</div><div class="line">    addli(text);</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(name)</span>&#123;</span></div><div class="line">    var text =  `攻略$&#123;name&#125;失败，请从新来过`               </div><div class="line">    addli(text);</div><div class="line">&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了，是不是挺有意思的，用了Promise感觉所有的事情都清晰化了，没有那么多复杂的函数嵌套了。<br>本文代码地址：<a href="https://github.com/xuxingeren/blog/blob/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/promise.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/12/02/1.png&quot; alt=&quot;Promise&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个星期没更新了，先来个小游戏来放松放松，勇者大战魔王：&lt;/p&gt;
&lt;iframe src=&quot;/c
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="异步" scheme="http://xuxin123.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="Promise" scheme="http://xuxin123.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>css3导航</title>
    <link href="http://xuxin123.com/2017/11/26/css3nav/"/>
    <id>http://xuxin123.com/2017/11/26/css3nav/</id>
    <published>2017-11-26T02:40:20.000Z</published>
    <updated>2017-11-25T10:37:39.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/26/1.png" alt="css3导航"><br>勤奋（<del>懒惰</del>）的我又更新了，又是css（<del>js比较难写，css随便糊弄过去就行了</del>），周日过得好快，感觉一觉就睡过去了，天冷得不想起床(‾▽‾)”。</p>
<h3 id="css3导航"><a href="#css3导航" class="headerlink" title="css3导航"></a>css3导航</h3><p>其实css3的特效导航有很多很多种，我只是列了一些给大家参考参考，在曲面阴影里面我就说过<code>:after和:before</code>，其实大多说导航的特效都是依赖于这两兄弟完成的（其他标签也行，不过结构就太复杂了，不推荐），这两兄弟写好样式，然后通过css3的transform来做旋转，放大，缩小，增减，倾斜等等，然后通过鼠标移入<code>:hover</code>或者用js的mouse事件把它的transform设置为初始样式，它就可以通过css3的过渡transition从旋转，放大，缩小，增减，倾斜等状态变成正常状态，即生成了一个过渡动画。<br><code>:after和:before</code>的content可以用来插入内容，比如<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">span</span> data-hover=<span class="string">"home"</span>&gt;首页&lt;/span&gt;</div><div class="line"></div><div class="line"><span class="selector-tag">span</span>::before &#123;</div><div class="line">    <span class="attribute">content</span>: attr(data-hover);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么<code>:before</code>中的类容就是home，当然data-hover不是必须叫这个，这只是一个自定义命名而已，你可以改成其他的，不过准守html5规范，命名还是在前面尽量要有<code>data-</code>。<br>其实这玩意儿也没啥技术难度，多写写很简单的，就不多说什么了，给大家几个参考参考:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav1</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#587285</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">3px</span> <span class="number">#2f4351</span>;</div><div class="line">    <span class="attribute">transition</span>: background <span class="number">0.6s</span>;		</div><div class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;			   </div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav1</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#2f4351</span>;</div><div class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-hover);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(270deg);</div><div class="line">    <span class="attribute">transition</span>: transform <span class="number">0.6s</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav1</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#2f4351</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav1</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(0deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.nav2</span> <span class="selector-tag">a</span> &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#237546</span>;</div><div class="line">        <span class="attribute">text-shadow</span>: none;</div><div class="line">        <span class="attribute">transition</span>: color <span class="number">0.3s</span>;</div><div class="line">    &#125;</div><div class="line"><span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-10px);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(10px);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;	   </div><div class="line">    <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>, transform <span class="number">0.3s</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,<span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0px);	</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.nav3</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;	</div><div class="line">    <span class="attribute">background</span>: <span class="number">#e35041</span>;			</div><div class="line">    <span class="attribute">transition</span>: transform <span class="number">0.4s</span>, background <span class="number">0.4s</span>;		</div><div class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">50%</span> -<span class="number">100px</span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav3</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(-90deg);</div><div class="line">    <span class="attribute">background</span>:<span class="number">#b53a2d</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav3</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#b53a2d</span>;</div><div class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-hover);</div><div class="line">    <span class="attribute">transition</span>: background <span class="number">0.4s</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(90deg);</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">50%</span>;</div><div class="line">    <span class="attribute">pointer-events</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nav3</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#E35041</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="效果展示："><a href="#效果展示：" class="headerlink" title="效果展示："></a>效果展示：</h3><iframe src="/code/nav/nav.html" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>
<p>感兴趣的话可以去看代码链接参考参考<br>本文代码地址<a href="https://github.com/xuxingeren/blog/tree/master/CSS/nav" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/11/26/1.png&quot; alt=&quot;css3导航&quot;&gt;&lt;br&gt;勤奋（&lt;del&gt;懒惰&lt;/del&gt;）的我又更新了，又是css（&lt;del&gt;js比较难写，css随便糊弄过去就行
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css3" scheme="http://xuxin123.com/tags/css3/"/>
    
      <category term="css" scheme="http://xuxin123.com/tags/css/"/>
    
      <category term="css特效" scheme="http://xuxin123.com/tags/css%E7%89%B9%E6%95%88/"/>
    
      <category term="伪元素" scheme="http://xuxin123.com/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    
      <category term="css3导航" scheme="http://xuxin123.com/tags/css3%E5%AF%BC%E8%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>曲面阴影</title>
    <link href="http://xuxin123.com/2017/11/25/curveimg/"/>
    <id>http://xuxin123.com/2017/11/25/curveimg/</id>
    <published>2017-11-25T07:17:33.000Z</published>
    <updated>2017-11-25T10:41:43.384Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/25/1.png" alt="曲面阴影"><br>讲了几次js的东西，换换口味了，讲讲css的东西吧，其实css写好了是非常有意思的，一些css的特效看起来非常炫酷，且流畅度要比js好得多。<br>一件好的作品，不仅要好用，还要带给用户视觉上以美的享受，许多东西把细微的东西做得好一些，能有非常棒的体验。<br>说是曲面阴影，其实应该还要加上翘边阴影的，这两个实现方法其实都差不多，都是用css的伪元素来实现的，说到<code>:after和:before</code>，其实css3中许多东西的动画都用到了这两兄弟，应用挺广泛的。</p>
<h3 id="曲面阴影"><a href="#曲面阴影" class="headerlink" title="曲面阴影"></a>曲面阴影</h3><p>曲面阴影的原理是将<code>:after和:before</code>定位到主体的一侧，且其<code>z-index</code>为负数，也就是在主体的下方，让后给其添加box-shadow属性即可，不过注意的是<code>:after和:before</code>的宽度一定要小于主体，主要是其两侧的box-shadow不要显示出来就行了，这样主体就只有一侧有阴影显示出来，造成了这一边是曲面的视觉差，看起来颇有立体感。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.box</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span>/<span class="number">10px</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(0,0,0,0.8);</div><div class="line">    <span class="attribute">z-index</span>: -<span class="number">10</span>;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="翘边阴影"><a href="#翘边阴影" class="headerlink" title="翘边阴影"></a>翘边阴影</h3><p>翘边阴影主要是将主体的四个边加上阴影，让主体看起来四边都是翘起来的一样，我们先将<code>:after和:before</code>的高度和宽度设置为主体的90%左右（根据具体情况细微调整），然后将其用css3的transform: skew 将其倾斜，rotate将其选择，其实就是把它变成平行四边形然后旋转角度，让主体完全覆盖住这个四边形就行了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.imgbox</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.imgbox</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">        <span class="attribute">z-index</span>:-<span class="number">1</span>; </div><div class="line">    <span class="attribute">background</span>:transparent;</div><div class="line">    <span class="attribute">width</span>:<span class="number">88%</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">90%</span>;</div><div class="line">    <span class="attribute">right</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">bottom</span>:<span class="number">15px</span>;</div><div class="line">        <span class="attribute">transition</span>: all <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.imgbox</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">transform</span>:<span class="built_in">skew</span>(-12deg) <span class="built_in">rotate</span>(-5deg); </div><div class="line">    <span class="attribute">box-shadow</span>:<span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(0,0,0,0.8);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.imgbox</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">    <span class="attribute">transform</span>:<span class="built_in">skew</span>(12deg) <span class="built_in">rotate</span>(5deg); </div><div class="line">    <span class="attribute">box-shadow</span>:-<span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(0,0,0,0.8);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还是上图吧：<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/25/2.png" alt="草图"><br>图是不是很挫，～(￣▽￣～)(～￣▽￣)～手残党，不要在意这些细节。<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/25/3.jpg" alt="手残"></p>
<h3 id="效果展示："><a href="#效果展示：" class="headerlink" title="效果展示："></a>效果展示：</h3><iframe src="/code/curveimg/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>
<p>本文代码地址<a href="https://github.com/xuxingeren/blog/blob/master/CSS/curveimg/index.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/11/25/1.png&quot; alt=&quot;曲面阴影&quot;&gt;&lt;br&gt;讲了几次js的东西，换换口味了，讲讲css的东西吧，其实css写好了是非常有意思的，一些css的特效看起来非常
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css3" scheme="http://xuxin123.com/tags/css3/"/>
    
      <category term="css" scheme="http://xuxin123.com/tags/css/"/>
    
      <category term="伪元素" scheme="http://xuxin123.com/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    
      <category term="box-shadow" scheme="http://xuxin123.com/tags/box-shadow/"/>
    
      <category term="曲面阴影" scheme="http://xuxin123.com/tags/%E6%9B%B2%E9%9D%A2%E9%98%B4%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>瀑布流小实例</title>
    <link href="http://xuxin123.com/2017/11/22/waterfall/"/>
    <id>http://xuxin123.com/2017/11/22/waterfall/</id>
    <published>2017-11-22T07:43:42.000Z</published>
    <updated>2017-12-04T06:13:54.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/22/1.png" alt="瀑布流"><br>网站备案终于下来了，等了十几天，不容易呀，顺便搞了个免费的https证书，把评论也换成畅言的了，来必力太挫了，ui看见想打人系列。<br>瀑布流，又称瀑布流式布局。其特点是随着页面滚动条向下滚动，不断加载数据块并附加至当前尾部。从Pinterest开始兴起，国内也有许多网站采用这种样式，不过大多数为了节约代码采用的是等宽等高的样式。今天我要演示的是等宽不等高如何进行瀑布流加载。</p>
<h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><p>由于我们这里瀑布流的布局是采用绝对定位的，所以html结构非常简单，加载的html都是通过js操控的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pin"</span>&gt;</span>       //js生成的</div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/0.jpg"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>css没什么好说的，也是非常简单，由于其等宽不等高的性质，我们把.box的宽度都定死,这里由于要整体居中，由于<code>.pin</code>有<code>padding-left:14px;</code>，故而而把<code>#main</code>设置了<code>left: -7px;</code>让其整体居中一下。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">padding</span>: <span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">7px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.pin</span>&#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">182px</span>;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>瀑布流的重点部分就在js啦。</p>
<h6 id="首先我们写一个创建节点的函数，用于创建-pin、-box和img，createDom传入父节点和img的src。"><a href="#首先我们写一个创建节点的函数，用于创建-pin、-box和img，createDom传入父节点和img的src。" class="headerlink" title="首先我们写一个创建节点的函数，用于创建.pin、.box和img，createDom传入父节点和img的src。"></a>首先我们写一个创建节点的函数，用于创建<code>.pin</code>、<code>.box</code>和img，createDom传入父节点和img的src。</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDom</span>(<span class="params">obj,src</span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">          oDiv.className = <span class="string">'pin'</span>;</div><div class="line">          <span class="keyword">var</span> oBox = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">          oBox.className = <span class="string">'box'</span>;</div><div class="line">          <span class="keyword">var</span> oImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">          oImg.src = <span class="string">'./images/'</span>+src;</div><div class="line">          oBox.appendChild(oImg);</div><div class="line">          oDiv.appendChild(oBox);</div><div class="line">          obj.appendChild(oDiv);</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h6 id="此时我们的页面上还空无一物呢，这时需要我们模拟后端数据，遍历json调用createDom生成dom节点。"><a href="#此时我们的页面上还空无一物呢，这时需要我们模拟后端数据，遍历json调用createDom生成dom节点。" class="headerlink" title="此时我们的页面上还空无一物呢，这时需要我们模拟后端数据，遍历json调用createDom生成dom节点。"></a>此时我们的页面上还空无一物呢，这时需要我们模拟后端数据，遍历json调用createDom生成dom节点。</h6><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oParent = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line">     <span class="keyword">var</span> dataInt = [];</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">98</span>;i++)&#123;</div><div class="line">         dataInt.push(&#123;<span class="string">'src'</span>:i+<span class="string">'.jpg'</span>&#125;);</div><div class="line">         <span class="keyword">if</span>(i&lt;<span class="number">50</span>)&#123;</div><div class="line">             createDom(oParent,dataInt[i].src);  </div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>此时样式大致是这样的</p>
<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/22/2.png" alt="生成样式"></p>
<h6 id="然后我们再写一个定位的函数-让其一一队列排齐。"><a href="#然后我们再写一个定位的函数-让其一一队列排齐。" class="headerlink" title="然后我们再写一个定位的函数,让其一一队列排齐。"></a>然后我们再写一个定位的函数,让其一一队列排齐。</h6><p>由于是等宽的，我们获取其中一个<code>.pin</code>的宽度，然后让可视窗口宽度除以这个宽度，通过向下取整获得一行能放下<code>.pin</code>的个数。用<code>.pin</code>的宽度<code>*</code>个数得到它父容器应该有的宽度赋给父容器，然后让其居中显示，此时整体就居中了。<br>我们再把所有的<code>.pin</code>遍历一遍，先把第一行的所有<code>.pin</code>的高度装在pinHarr数组里面。由于瀑布流是一一对齐的，每一行的第一个都是在最矮的那一列下面。<br>所以第二行的第一个<code>.pin</code>应该在它的上一行最矮的那个<code>.pin</code>下面，所以不是第一行的话，我们给其全部绝对定位，我们就找到第一行中<code>.pin</code>的最小高度，取得它的索引，这样就得到最矮的那个<code>.pin</code>，我们取得它的高度和索引，把第二行的这个<code>.pin</code>的top赋值第一行中<code>.pin</code>最小高度，left赋值第一行最矮的<code>.pin</code>的索引<code>*.pin</code>的宽度，这样第二行的第一个就在第一行的最矮的那个<code>.pin</code>下面且对齐。<br>最后我们把pinHarr中最小的那个高度换成最小高度加上新增的这个<code>.pin</code>高度（简单来说就是列高），此时最小高度变化了，我们下一次还是找最小高度放<code>.pin</code>，以此类推，每次放置<code>.pin</code>都是找最矮那一列放置。这样就实现了等宽不等高的对其布局了。<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">parent,pin</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> aPin = <span class="built_in">parent</span>.querySelectorAll(pin);</div><div class="line">        <span class="keyword">var</span> iPiw = aPin[<span class="number">0</span>].offsetWidth;</div><div class="line">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">document</span>.documentElement.clientWidth/iPiw);</div><div class="line">        <span class="built_in">parent</span>.style.cssText = <span class="string">'width:'</span>+num*iPiw+<span class="string">'px;margin:0 auto;'</span>;</div><div class="line">        <span class="keyword">var</span> pinHarr = [];</div><div class="line">        aPin.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el,index</span>)</span>&#123;</div><div class="line">           <span class="keyword">var</span> pinH = el.offsetHeight;</div><div class="line">               <span class="keyword">if</span>(index&lt;num)&#123;</div><div class="line">                  pinHarr[index] = pinH;  </div><div class="line">               &#125;<span class="title">else</span>&#123;</div><div class="line">                <span class="keyword">var</span> minH = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,pinHarr);</div><div class="line">                <span class="keyword">var</span> minindex =  pinHarr.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;                   </div><div class="line">                        <span class="keyword">return</span> minH===num;</div><div class="line">                &#125;);</div><div class="line">                el.style.position = <span class="string">'absolute'</span>;</div><div class="line">                el.style.left = iPiw*minindex +<span class="string">'px'</span>;</div><div class="line">                el.style.top  = minH+<span class="string">'px'</span>;</div><div class="line">                pinHarr[minindex] = minH+el.offsetHeight;</div><div class="line">               &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>接下来等页面生成的最后一个img加载出来后我们调用这个函数，布局就完成了。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">oParent.getElementsByClassName(<span class="string">'pin'</span>)[<span class="number">49</span>].getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>].onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    waterfall(oParent,<span class="string">'.pin'</span>);            </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="当页面滚动到底部时，我们还要让其生成新的dom，将其放在底部。"><a href="#当页面滚动到底部时，我们还要让其生成新的dom，将其放在底部。" class="headerlink" title="当页面滚动到底部时，我们还要让其生成新的dom，将其放在底部。"></a>当页面滚动到底部时，我们还要让其生成新的dom，将其放在底部。</h6><p>我们先写一个判断函数，判断滚动条滚动时到达底部没有，没有就返回false，有就返回true。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBottom</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> aPin = oParent.querySelectorAll(<span class="string">'.pin'</span>);</div><div class="line">    <span class="keyword">var</span> lastPinh = aPin[aPin.length<span class="number">-1</span>].offsetTop+<span class="built_in">Math</span>.floor(aPin[aPin.length<span class="number">-1</span>].offsetHeight/<span class="number">2</span>); </div><div class="line">    <span class="keyword">var</span> Sh = <span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop;</div><div class="line">    <span class="keyword">var</span> Dh = <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">    <span class="keyword">return</span> lastPinh&lt;Sh+Dh?<span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们添加滚动事件，当到达底部时，我们遍历json，用createDom生成dom添加到<code>#main</code>底部，然后调用waterfall，让其让其一一队列排齐。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(isBottom())&#123;</div><div class="line">        dataInt.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">            createDom(oParent,val.src);</div><div class="line">        &#125;);             </div><div class="line">        waterfall(oParent,<span class="string">'.pin'</span>);  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，一个等宽不等高的无限加载的瀑布流就实现了。效果如下：</p>
<iframe src="/code/waterfall/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/blob/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/waterfall/index.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/11/22/1.png&quot; alt=&quot;瀑布流&quot;&gt;&lt;br&gt;网站备案终于下来了，等了十几天，不容易呀，顺便搞了个免费的https证书，把评论也换成畅言的了，来必力太挫了，u
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="瀑布流" scheme="http://xuxin123.com/tags/%E7%80%91%E5%B8%83%E6%B5%81/"/>
    
      <category term="无限加载" scheme="http://xuxin123.com/tags/%E6%97%A0%E9%99%90%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>计算器小实例</title>
    <link href="http://xuxin123.com/2017/11/13/Calculator/"/>
    <id>http://xuxin123.com/2017/11/13/Calculator/</id>
    <published>2017-11-13T08:40:43.000Z</published>
    <updated>2017-11-13T10:36:02.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/13/1.png" alt="计算器"><br>最近在学react，没啥时间更新博客，等有空的时候把react基础写一写，react写法还是挺有意思的。<br>这个实例没啥可说的，就是一个小实例而已，js实现最简单的计算器功能。<br>当然原理很简单的，就是通过<code>eval()</code>可以计算字符串的特性实现字符串的运算，当然<code>eval()</code>还是少用为好，它的可读性非常差，不好再做优化和编译。<br><iframe src="/code/calculator.html" width="100%" height="340px" frameborder="0" allowfullscreen></iframe></p>
<h5 id="关键js代码"><a href="#关键js代码" class="headerlink" title="关键js代码"></a>关键js代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'button.btns'</span>),</div><div class="line">text = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box p'</span>),</div><div class="line">arr = [],</div><div class="line">Result;</div><div class="line">[].slice.call(btns).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                                     </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.value === <span class="string">'='</span>)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">            Result = <span class="built_in">eval</span>(<span class="string">'('</span>+arr.join(<span class="string">''</span>)+<span class="string">')'</span>);</div><div class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">            Result = <span class="string">'error'</span>;</div><div class="line">            &#125;</div><div class="line">        arr  = [Result]; </div><div class="line">        text[<span class="number">1</span>].innerText = Result;  </div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            text[<span class="number">0</span>].innerText = <span class="string">''</span>;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.value === <span class="string">'C'</span>)&#123;</div><div class="line">                arr = [];</div><div class="line">                <span class="keyword">return</span>; </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.value === <span class="string">'Back'</span>)&#123;</div><div class="line">                arr.pop();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                arr.push(<span class="keyword">this</span>.value);</div><div class="line">            &#125;                                             </div><div class="line">            arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">                text[<span class="number">0</span>].innerText += num;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/blob/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/calculator.html" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/11/13/1.png&quot; alt=&quot;计算器&quot;&gt;&lt;br&gt;最近在学react，没啥时间更新博客，等有空的时候把react基础写一写，react写法还是挺有意思的。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="计算器" scheme="http://xuxin123.com/tags/%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>拖拽小实例</title>
    <link href="http://xuxin123.com/2017/11/01/drag/"/>
    <id>http://xuxin123.com/2017/11/01/drag/</id>
    <published>2017-11-01T08:18:44.000Z</published>
    <updated>2017-11-01T10:24:00.830Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/11/01/1.png" alt="拖拽"><br>在日常业务中有很多时候会用到拖拽，比如弹窗什么的，还有一些导航什么的拖动组成自己喜欢的导航。今天就写了两个小例子带大家了解PC端和移动端的拖拽是怎么实现的。</p>
<h3 id="PC端拖拽"><a href="#PC端拖拽" class="headerlink" title="PC端拖拽"></a>PC端拖拽</h3><p>pc端拖动主要是onmouse事件，当你鼠标对拖动目标点下时触发拖动目标的onmousedown事件，此时记录下鼠标点击的位置坐标和拖动目标的右上角坐标，得到二者之差，鼠标点下并且拖动触发document的onmousemove事件，获得不断移动的鼠标位置坐标，再减去之前得到的差值，把得到的Y轴移动值赋给top，X轴移动值赋给left；当鼠标松开时触发onmouseup事件，此时销毁document.onmousemove和拖动目标的onmousemove和事件，一个简单的拖拽就完成了。注意一下，当拖动是会有默认事件发生，比如往下拖动，如果有滚动条的话，会使滚动条滚动，这时需要阻止一下默认事件，event.preventDefault();<br>当然，如果你要限制范围的话，可以在onmousemove中吧Y轴移动值和X轴移动值用判断限制一下，我限制的是不能超过文档窗口，有兴趣可以改一下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">touch</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">    		<span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(id); </div><div class="line">            obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> disX = event.pageX - obj.offsetLeft;</div><div class="line">                <span class="keyword">var</span> disY = event.pageY - obj.offsetTop;</div><div class="line">                <span class="keyword">var</span> W = <span class="built_in">document</span>.documentElement.clientWidth-obj.offsetWidth;</div><div class="line">                <span class="keyword">var</span> H = <span class="built_in">document</span>.documentElement.clientHeight-obj.offsetHeight;</div><div class="line">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">                    event.preventDefault();</div><div class="line">                    <span class="keyword">var</span> l = event.pageX - disX;</div><div class="line">                    <span class="keyword">var</span> t = event.pageY - disY;</div><div class="line">                    <span class="keyword">if</span>(l&lt;<span class="number">0</span>)&#123;</div><div class="line">                        l = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(l&gt;W)&#123;</div><div class="line">                        l = W ;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(t&lt;<span class="number">0</span>)&#123;</div><div class="line">                        t = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(t&gt;H)&#123;</div><div class="line">                        t = H;</div><div class="line">                    &#125;</div><div class="line">                    obj.style.top = t+ <span class="string">'px'</span>;</div><div class="line">                    obj.style.left = l+<span class="string">'px'</span>;</div><div class="line">                &#125;</div><div class="line">                obj.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">                    obj.onmouseup = <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<iframe src="/code/drag1.html" width="100%" height="450px" frameborder="0" allowfullscreen></iframe>
<h3 id="移动端拖拽"><a href="#移动端拖拽" class="headerlink" title="移动端拖拽"></a>移动端拖拽</h3><p>移动端的拖拽是由touch事件完成的，和PC的onmouse事件大致一样，touchstart是手指按下，可以通过event.targetTouches.length获得有多少手指按下，一般拖动一根手指，于是当event.targetTouches.length == 1时才能触发拖拽事件，event.targetTouches[0]相当于鼠标的event，通过这个可以获取手指按下的坐标，其余的大致和PC差不多。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">touch</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(id); </div><div class="line">			obj.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </div><div class="line">			<span class="keyword">if</span> (event.targetTouches.length == <span class="number">1</span>) &#123; </div><div class="line">			<span class="keyword">var</span> touch = event.targetTouches[<span class="number">0</span>]; </div><div class="line">			<span class="keyword">var</span> disX=touch.pageX-obj.offsetLeft; </div><div class="line">			<span class="keyword">var</span> disY=touch.pageY-obj.offsetTop;</div><div class="line">			<span class="keyword">var</span> W = <span class="built_in">document</span>.documentElement.clientWidth-obj.offsetWidth;</div><div class="line">            <span class="keyword">var</span> H = <span class="built_in">document</span>.documentElement.clientHeight-obj.offsetHeight;</div><div class="line">			obj.addEventListener(<span class="string">'touchmove'</span>,move);  </div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">event</span>)</span>&#123;	</div><div class="line">				event.preventDefault();</div><div class="line">					<span class="keyword">var</span> touch2=event.targetTouches[<span class="number">0</span>];</div><div class="line">					<span class="keyword">var</span> l=touch2.pageX-disX;</div><div class="line">					<span class="keyword">var</span> t=touch2.pageY-disY;</div><div class="line">					<span class="keyword">if</span>(l&lt;<span class="number">0</span>)&#123;</div><div class="line">						l=<span class="number">0</span>;</div><div class="line">					&#125;;</div><div class="line">					<span class="keyword">if</span>(l&gt;W)&#123;</div><div class="line">						l=W;</div><div class="line">					&#125;;</div><div class="line">					<span class="keyword">if</span>(t&lt;<span class="number">0</span>)&#123;</div><div class="line">						t=<span class="number">0</span>;</div><div class="line">					&#125;;</div><div class="line">					<span class="keyword">if</span>(t&gt;H)&#123;</div><div class="line">						t=H;</div><div class="line">					&#125;;</div><div class="line">					obj.style.left=l+<span class="string">'px'</span>;</div><div class="line">					obj.style.top=t+<span class="string">'px'</span>;</div><div class="line">		 </div><div class="line">			&#125;;</div><div class="line">		 	 obj.addEventListener(<span class="string">'touchend'</span>,chend);</div><div class="line">		 	 <span class="function"><span class="keyword">function</span> <span class="title">chend</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">				obj.removeEventListener(<span class="string">'touchmove'</span>,move);</div><div class="line">				obj.removeEventListener(<span class="string">'touchend'</span>,chend);</div><div class="line">		 	 &#125;;</div><div class="line">		&#125;; </div><div class="line">		&#125;, <span class="literal">false</span>);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<iframe src="/code/drag2.html" width="100%" height="450px" frameborder="0" allowfullscreen></iframe>
<p>不过有个地方要注意一下，移动端如果使用event.preventDefault();阻止默认事件的话，可能会对流畅度有点影响，如果你想应用到高级的浏览器上的话，就不要使用event.preventDefault();了，推荐的做法是用css中的touch-action来阻止默认事件，touch-action:none使触控事件发生在元素上时，不进行任何操作。也就是当touchstart发生时让html的touch-action为none，拖动完成touchend时，把html的touch-action改成auto就行了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">touch</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(id); </div><div class="line">			obj.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </div><div class="line">			<span class="keyword">if</span> (event.targetTouches.length == <span class="number">1</span>) &#123; </div><div class="line">			<span class="keyword">var</span> touch = event.targetTouches[<span class="number">0</span>]; </div><div class="line">			<span class="keyword">var</span> disX=touch.pageX-obj.offsetLeft; </div><div class="line">			<span class="keyword">var</span> disY=touch.pageY-obj.offsetTop;</div><div class="line">			obj.addEventListener(<span class="string">'touchmove'</span>,move);  </div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">event</span>)</span>&#123;	</div><div class="line">				<span class="built_in">document</span>.documentElement.style.touchAction = <span class="string">'none'</span>;</div><div class="line">					<span class="keyword">var</span> touch2=event.targetTouches[<span class="number">0</span>];</div><div class="line">					<span class="keyword">var</span> l=touch2.pageX-disX;</div><div class="line">					<span class="keyword">var</span> t=touch2.pageY-disY;</div><div class="line">					<span class="keyword">if</span>(l&lt;<span class="number">0</span>)&#123;</div><div class="line">						l=<span class="number">0</span>;</div><div class="line">					&#125;;</div><div class="line">					<span class="keyword">if</span>(l&gt;<span class="built_in">document</span>.documentElement.clientWidth-obj.offsetWidth)&#123;</div><div class="line">						l=<span class="built_in">document</span>.documentElement.clientWidth-obj.offsetWidth</div><div class="line">					&#125;;</div><div class="line">					<span class="keyword">if</span>(t&lt;<span class="number">0</span>)&#123;</div><div class="line">						t=<span class="number">0</span>;</div><div class="line">					&#125;;</div><div class="line">					<span class="keyword">if</span>(t&gt;<span class="built_in">document</span>.documentElement.clientHeight-obj.offsetHeight)&#123;</div><div class="line">						t=<span class="built_in">document</span>.documentElement.clientHeight-obj.offsetHeight;</div><div class="line">					&#125;;</div><div class="line">					obj.style.left=l+<span class="string">'px'</span>;</div><div class="line">					obj.style.top=t+<span class="string">'px'</span>;</div><div class="line">		 </div><div class="line">			&#125;;</div><div class="line">		 	 obj.addEventListener(<span class="string">'touchend'</span>,chend);</div><div class="line">		 	 <span class="function"><span class="keyword">function</span> <span class="title">chend</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">				<span class="built_in">document</span>.documentElement.style.touchAction = <span class="string">'auto'</span>;</div><div class="line">				obj.removeEventListener(<span class="string">'touchmove'</span>,move);</div><div class="line">				obj.removeEventListener(<span class="string">'touchend'</span>,chend);</div><div class="line">		 	 &#125;;</div><div class="line">		&#125;; </div><div class="line">		&#125;, <span class="literal">false</span>);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/tree/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/drag" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/11/01/1.png&quot; alt=&quot;拖拽&quot;&gt;&lt;br&gt;在日常业务中有很多时候会用到拖拽，比如弹窗什么的，还有一些导航什么的拖动组成自己喜欢的导航。今天就写了两个小例子带
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="拖拽" scheme="http://xuxin123.com/tags/%E6%8B%96%E6%8B%BD/"/>
    
      <category term="touch" scheme="http://xuxin123.com/tags/touch/"/>
    
  </entry>
  
  <entry>
    <title>图片加载</title>
    <link href="http://xuxin123.com/2017/10/27/complete/"/>
    <id>http://xuxin123.com/2017/10/27/complete/</id>
    <published>2017-10-27T06:40:55.000Z</published>
    <updated>2017-10-28T02:16:28.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg.jpg" alt="图片加载"><br>图片懒加载技术相信大家再熟悉不过了，当网站中用到大量图片时回事网站打开时加载过慢，用户体验不好。用户其实看到的是可视区域，可视区域下面的图片什么的可以不用加载，当用户滚动滚动条要看到还没加载的图片时，在让其进行加载。所谓懒加载，就是把img的src放在一个自定义属性中，src为空，当触发某个事件时把自定义属性的值赋给src。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;img data-src=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1509098785051&amp;di=0cdd1c1cb8314d1fe3c460f3e13ece59&amp;imgtype=0&amp;src=http%3A%2F%2Fimg2.niutuku.com%2Fdesk%2F1207%2F1052%2Fntk121408.jpg"</span> alt=<span class="string">""</span> class=<span class="string">"myimg"</span> /&gt;</div><div class="line"></div><div class="line">var img = document.getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>];</div><div class="line">img.src = img.getAttribute(<span class="string">"data-src"</span>);</div></pre></td></tr></table></figure></p>
<p>当然，一些小图片可以这样做，因为加载快嘛，一瞬间就完成了，但是网络比较慢的时候加载一些大图片时，就不太好了。<br>一般懒加载默认有个默认的显示图片，但是直接替换的话，如果加载慢的话图片一下没加载出来就会显示一片空白，这样不太好，应该做到替换时图片直接显示出来，图片没加载完成还是显示的默认图片。这就要用到我们今天所说的东西了，判断图片加载完成后触发的事件。<br>判断图片加载完成一般有三种方法</p>
<h3 id="一、load事件"><a href="#一、load事件" class="headerlink" title="一、load事件"></a>一、load事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> Img = <span class="keyword">new</span> Image();</div><div class="line">Img.src = img.getAttribute(<span class="string">"data-src"</span>);</div><div class="line">Img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单粗暴，基本上所有浏览器都支持，但是有一个问题，在IE、Opera等浏览器中第一次加载是正常的，但是同一张图片再次加载时不会触发onload事件了，IE是根据图片是否显示过来判断，就是说当加载的图片显示出来后就不在执行onload事件了。</p>
<h3 id="二、onreadystatechange事件"><a href="#二、onreadystatechange事件" class="headerlink" title="二、onreadystatechange事件"></a>二、onreadystatechange事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> Img = <span class="keyword">new</span> Image();</div><div class="line">Img.src = img.getAttribute(<span class="string">"data-src"</span>);</div><div class="line">Img.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(Img.readyState==<span class="string">"complete"</span>||Img.readyState==<span class="string">"loaded"</span>)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ie下，img对象与xhr对象一样具有onreadystatechange事件，可以通过该事件判断图片是否加载完成，ie特有的，其他浏览器不支持。且问题和上面问题一样。</p>
<h3 id="三、img的complete属性"><a href="#三、img的complete属性" class="headerlink" title="三、img的complete属性"></a>三、img的complete属性</h3><p>complete 属性可返回浏览器是否已完成对图像的加载，如果加载完成，则返回 true，否则返回 fasle，基本所有浏览器都支持，且不会有上面的问题。<br>我们可以用其特性，做一个定时器，查看其是否加载完成，完成加载后执行一个回调函数。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;button onclick=<span class="string">"loadImage(document.getElementsByTagName('img'),imgLoaded,allimgLoaded)"</span>&gt;加载&lt;/button&gt;</div><div class="line">&lt;img data-src=<span class="string">"http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg1.jpg"</span> src=<span class="string">""</span>  alt=<span class="string">""</span> class=<span class="string">"myimg"</span> /&gt;</div><div class="line">&lt;img data-src=<span class="string">"http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg2.jpg"</span> src=<span class="string">""</span> alt=<span class="string">""</span> class=<span class="string">"myimg"</span> /&gt;</div><div class="line">&lt;img data-src=<span class="string">"http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg3.jpg"</span> src=<span class="string">""</span> alt=<span class="string">""</span> class=<span class="string">"myimg"</span>/&gt;			</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span><span class="params">(objarr,callback,allcallback)</span></span>&#123;</div><div class="line">    var timer = null;</div><div class="line">    var i = <span class="number">0</span>;</div><div class="line">    var <span class="built_in">len</span> = objarr.length;</div><div class="line">    var <span class="built_in">load</span>;</div><div class="line">    <span class="built_in">load</span> = <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(i&lt;<span class="built_in">len</span>)&#123;</div><div class="line">            var img = new Image();</div><div class="line">            img.src = objarr[i].getAttribute(<span class="string">"data-src"</span>);</div><div class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">                <span class="keyword">if</span>(img.complete)&#123;														</div><div class="line">                    clearInterval(timer);																						</div><div class="line">                    callback(objarr[i++],img);																	</div><div class="line">                    <span class="built_in">load</span>(i);</div><div class="line">                &#125;</div><div class="line">            &#125;,<span class="number">80</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            allcallback();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">load</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoaded</span><span class="params">(obj,img)</span></span>&#123;</div><div class="line">    obj.src = img.src;</div><div class="line">    console.<span class="built_in">log</span>(img.width);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allimgLoaded</span><span class="params">()</span></span>&#123;</div><div class="line">    alert(<span class="string">"图片全部加载完成"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<iframe src="/code/complete.html" width="100%" height="450px" frameborder="0" allowfullscreen></iframe>
<p>ok，上面将一堆图片的<code>data-src</code>链接放在了<code>src</code>中，图片都是瞬间出现，而不是慢慢加载出来的。<br>本文代码地址:<a href="https://github.com/xuxingeren/blog/blob/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/complete.html" target="_blank" rel="external">链接</a>;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg.jpg&quot; alt=&quot;图片加载&quot;&gt;&lt;br&gt;图片懒加载技术相信大家再熟悉不过了，当网站中用到大量图片时回事网站打开时加载过慢，用户体验不好。用户其实
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="图片替换" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E6%9B%BF%E6%8D%A2/"/>
    
      <category term="图片加载" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>CSS-背景裁剪</title>
    <link href="http://xuxin123.com/2017/10/26/background-clip/"/>
    <id>http://xuxin123.com/2017/10/26/background-clip/</id>
    <published>2017-10-26T07:00:24.000Z</published>
    <updated>2017-12-19T08:00:39.165Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/10/26/1.png" alt="背景裁剪"><br>最近一直忙着看ES6（懒），好久都没更新博客（不想写），难得下午抽空写写。<br>好了，今天的是文字对背景图片的裁剪，以及一些衍生的小东西。</p>
<h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip:"></a>background-clip:</h3><p>background-clip 属性规定背景的绘制区域。其值主要有四个<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">background</span>-clip: <span class="built_in">border</span>-<span class="built_in">box</span>;</div><div class="line"><span class="built_in">background</span>-clip: padding-<span class="built_in">box</span>;</div><div class="line"><span class="built_in">background</span>-clip: <span class="built_in">content</span>-<span class="built_in">box</span>;</div><div class="line"><span class="built_in">background</span>-clip: text;</div></pre></td></tr></table></figure></p>
<p>顾名思义剪切掉边框的背景，剪切掉外边距的背景，剪切掉内容的背景，剪切掉文字外背景<br><iframe src="/code/clip1.html" width="100%" height="450px" frameborder="0" allowfullscreen></iframe><br>当然最后一个比较特殊，需要比较高级的浏览器才能看到。</p>
<h3 id="webkit-text-fill-color"><a href="#webkit-text-fill-color" class="headerlink" title="-webkit-text-fill-color:"></a>-webkit-text-fill-color:</h3><p>检索或设置对象中的文字填充颜色，通过text-fill-color属性，可以做出一些例如渐变文字和镂空文字的效果。上面的配合-webkit-text-fill-color: transparent;属性可以让文字的填充色变成透明，透过文字看到背景。<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/10/26/1.png" alt="镂空背景文字"></p>
<h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position:"></a>background-position:</h3><p>background-position 属性设置背景图像的起始位置。这三者结合起来会产生什么效果呢？（请用谷歌浏览器观看）<br><iframe src="/code/clip2.html" width="100%" height="320px" frameborder="0" allowfullscreen></iframe><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text2</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">720px</span>;</div><div class="line">        <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(top, #fc0, #f30 50%, #c00 51%, #600);</div><div class="line">        <span class="attribute">-webkit-background-clip</span>: text;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">80px</span>;</div><div class="line">        <span class="attribute">-webkit-text-fill-color</span>: transparent;</div><div class="line">        <span class="attribute">font-weight</span>: bold;</div><div class="line">        <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">        <span class="attribute">background-position</span>: -<span class="number">800px</span> <span class="number">0</span>;</div><div class="line">        <span class="attribute">animation</span>: loop <span class="number">10s</span> linear infinite;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> loop &#123;</div><div class="line">        0% &#123;</div><div class="line">                <span class="attribute">background-position</span>: -<span class="number">800px</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        100% &#123;</div><div class="line">                <span class="attribute">background-position</span>: -<span class="number">0</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很像卡拉OK的效果，是不是很酷呀。</p>
<p>本文代码地址:<a href="https://github.com/xuxingeren/blog/tree/master/CSS/background-clip" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/10/26/1.png&quot; alt=&quot;背景裁剪&quot;&gt;&lt;br&gt;最近一直忙着看ES6（懒），好久都没更新博客（不想写），难得下午抽空写写。&lt;br&gt;好了，今天的是文字对背景图片
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css3" scheme="http://xuxin123.com/tags/css3/"/>
    
      <category term="背景裁剪" scheme="http://xuxin123.com/tags/%E8%83%8C%E6%99%AF%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
  <entry>
    <title>图片上传那些事-总结篇</title>
    <link href="http://xuxin123.com/2017/09/21/imgfile3/"/>
    <id>http://xuxin123.com/2017/09/21/imgfile3/</id>
    <published>2017-09-21T06:10:20.000Z</published>
    <updated>2018-01-02T02:23:41.156Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/0.png" alt="图片上传"><br>好了，总结篇终于开工了，这次来说说关于上传的一些琐碎事情。</p>
<p>1.file input的美化<br>file input 好用是好用但是论起颜值来说差得不是一点半点，怎么能让这玩意儿拉低我们写好的页面颜值呢(ง •̀_•́)ง，来整整容吧，其实这个东西实现起来也很简单的<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/09/21/1.png" alt="file样式"><br>首先我们把这个上传的input用<code>display: none;</code>隐藏掉，然后发挥自己力量写个高颜值的上传按钮，给这个按钮添加点击事件，点击的时候让上传input触发点击，ok，美化工作就完成了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"file"</span> style=<span class="string">"display: none;"</span>/&gt;</div><div class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn"</span> onclick=<span class="string">"upimg()"</span>&gt;上传&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">var myfile = document.getElementById('file');</span></div><div class="line"><span class="regexp">function upimg()&#123;				</span></div><div class="line"><span class="regexp">	myfile.click();</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure></p>
<p>2.上传筛选<br>很多时候在上传东西的时候都要进行上传筛选的工作，避免用户把什么乱七八糟的东西都往后台扔，其实input有 <code>accept</code> 这个属性来进行提交文件类型的筛选的。<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"file"</span> name=<span class="string">"pic"</span> id=<span class="string">"pic"</span> accept=<span class="string">"image/gif, image/jpeg"</span> /&gt; <span class="comment">//选择git和jpg图片上传</span></div></pre></td></tr></table></figure></p>
<p>但是这玩意儿有点兼容问题，其筛选还可以选择全部文件，并不能达到筛选的目的。上文说到我们用数组装用户要上传的图片，那么筛选就可以在数组push的时候进行了。<br>这样凡是验证不通过的filearr都不会push进去，也就提交不了了。<br>当然还有一个小问题，但是这个问题一般来说可以忽略，当用户选择了一张图后下一次再次选择同一张图时并没有push，因为没有触发onchange事件，你想这样也能添加的话就把input的value清空一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> filearr = [];</div><div class="line"><span class="keyword">var</span> myfile = <span class="built_in">document</span>.getElementById(<span class="string">'file'</span>);</div><div class="line">myfile.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> files = <span class="keyword">this</span>.files; </div><div class="line">	<span class="keyword">if</span>(!files.length)<span class="keyword">return</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;files.length;i++)&#123;	</div><div class="line">		<span class="keyword">if</span>(!(files[i].type.indexOf(<span class="string">'image'</span>)==<span class="number">0</span> &amp;&amp; files[i].type &amp;&amp; <span class="regexp">/\.(?:jpg|png|gif)$/</span>.test(files[i].name)) )&#123;  </div><div class="line">			            <span class="built_in">console</span>.log(<span class="string">'图片只能是jpg,gif,png'</span>);      <span class="comment">//上传其余文件的验证根据情况自己写</span></div><div class="line">			            <span class="keyword">continue</span>;  </div><div class="line">			       &#125;;			</div><div class="line">		 filearr.push(files[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//this.value = ''; 重复提交同一张图片</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.上传进度条<br>在进行上传时有时候会有进度显示的需求，在XMLHttpRequest对象发出的HTTP请求时可以绑定progress事件，来获得传输的数据进度。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"progress"</span>&gt;</div><div class="line">  &lt;div  id=<span class="string">"progressbar"</span> style=<span class="string">"width:0%"</span>&gt;</div><div class="line">    <span class="number">0</span>%</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">var request = new XMLHttpRequest(); 				</div><div class="line">	request.<span class="built_in">open</span>(<span class="string">"POST"</span>, <span class="string">"1.php"</span>,<span class="literal">true</span>);</div><div class="line">	request.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;					</div><div class="line">		<span class="keyword">if</span>(request.readyState==<span class="number">4</span>)&#123;						</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	request.upload.addEventListener(<span class="string">'progress'</span>,progress, <span class="literal">false</span>);		//绑定progress事件</div><div class="line">	request.send(formData);</div><div class="line">	var progressbar = document.getElementById(<span class="string">'progressbar'</span>);</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">progress</span><span class="params">(e)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(e.lengthComputable)&#123;</div><div class="line">			var percentComplete = Math.round(e.<span class="built_in">loaded</span>/ e.total * <span class="number">100</span> );</div><div class="line">			console.<span class="built_in">log</span>(percentComplete);</div><div class="line">			progressbar.style.width = percentComplete+<span class="string">"%"</span>;</div><div class="line">			progressbar.innerText = percentComplete+<span class="string">"%"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>至于进度条样式什么的靠自己发挥啦。</p>
<p>4.富文本编辑器问题<br>有很多富文本编辑器都带有文件上传的功能，但是使用是很多时候都有点小问题，在用谷哥浏览器时，点击上传按钮后很久图片选择的弹窗才出现。其原因就是上传的input设置了多个筛选的<code>accept</code>，比如<code>image/*</code>和<code>image/svg+xml</code>，这会导致谷哥浏览器打开文件选择弹窗特别慢。<br>解决办法 :涉及多个文件验证的用<code>accept=&quot;image/jpeg, image/jpg, image/png, image/gif&quot;</code>，避免使用类似<code>image/*</code>和<code>image/svg+xml</code>多个文件同时验证的写法，可以修改富文本js源码，或者富文本加载完成后用file.setAttribute(‘accept’,XXX)覆盖掉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/0.png&quot; alt=&quot;图片上传&quot;&gt;&lt;br&gt;好了，总结篇终于开工了，这次来说说关于上传的一些琐碎事情。&lt;/p&gt;
&lt;p&gt;1.file input的美化&lt;br
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="图片上传" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="上传进度" scheme="http://xuxin123.com/tags/%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6/"/>
    
      <category term="上传美化" scheme="http://xuxin123.com/tags/%E4%B8%8A%E4%BC%A0%E7%BE%8E%E5%8C%96/"/>
    
      <category term="上传筛选" scheme="http://xuxin123.com/tags/%E4%B8%8A%E4%BC%A0%E7%AD%9B%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>图片上传那些事-图片上传篇</title>
    <link href="http://xuxin123.com/2017/09/09/imgfile2/"/>
    <id>http://xuxin123.com/2017/09/09/imgfile2/</id>
    <published>2017-09-09T01:40:30.000Z</published>
    <updated>2018-01-02T02:16:47.963Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/0.png" alt="图片上传"><br>上次说完了图片上传预览，使用form提交就可以把图片进行提交了，但是在现实中这样的操作往往满足不了用户需求，一般在进行上传操作时可能会进行图片的多次重新选择和增删所选择的图片，这时用form提交就实现不了。</p>
<h3 id="这时就该我们本篇的主角闪亮登场了：FormData。"><a href="#这时就该我们本篇的主角闪亮登场了：FormData。" class="headerlink" title="这时就该我们本篇的主角闪亮登场了：FormData。"></a>这时就该我们本篇的主角闪亮登场了：FormData。</h3><p>W3C在2008年提出XMLHttpRequest Level 2的草案中改进了XMLHttpRequest对象，在新版本的一些功能中就有FormData。利用FormData对象,我们可以模拟表单操作，然后通过XMLHttpRequest的send()方法来异步提交这个表单，发送FormData对象，这与form提交网页表单的效果完全一样，这个改进使得可以通过新版XMLHttpRequest对象上传文件，使得无刷新上传文件成为了可能。<br>1.FormData<br>创建一个FormData对象，可以直接通过new FormData()创建一个FormData空对象：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="type">FormData</span>();</div></pre></td></tr></table></figure></p>
<p>当然，想要构造一个包含Form表单数据的FormData对象时，也可以通过HTML表单创建FormData对象，需要在创建FormData对象时指定表单的元素,这样做在发送数据时会将你的form表单的数据添加到formData中一起发送出去。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myform = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">"form"</span>);</div><div class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(myform);</div></pre></td></tr></table></figure></p>
<p>2.FormData操作方法<br>FormData通过append(name, value,filename)来添加数据，其实就是类似于使用键值对添加数据，如果添加的name不存在则会新增一条数据，如果name已存在，则value将添加到数组的末尾，类似于[‘a1’,’a2’]。filename是可选的，这是指定文件的文件名，当value参数被指定为一个Blob对象或者一个File对象时，该文件名会被发送到服务器上，对于Blob对象来说，这个值默认为blob。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">formData.<span class="built_in">append</span>(<span class="string">"a1"</span>, <span class="string">"aa"</span>);</div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"a1"</span>, <span class="string">"bb"</span>);</div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"a1"</span>, <span class="string">"cc"</span>);</div><div class="line"></div><div class="line">formData.getAll(<span class="string">"a1"</span>); // [<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>]</div></pre></td></tr></table></figure></p>
<p>set(name, value) 方法会对 FormData 对象里的某个 name 设置一个新的value，如果该 name 不存在，则添加。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.append</span>(<span class="string">"a1"</span>, <span class="string">"aa"</span>);</div><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.set</span>(<span class="string">"a1"</span>,<span class="string">"bb"</span>);</div><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.get</span>(<span class="string">"a1"</span>); <span class="comment">// "bb"</span></div></pre></td></tr></table></figure></p>
<p>delete() 方法 会从 FormData 对象中删除指定 name 和它对应的 value。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.append</span>(<span class="string">"a1"</span>, <span class="string">"aa"</span>);</div><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.delete</span>(<span class="string">"a1"</span>);</div><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.get</span>(<span class="string">"a1"</span>); <span class="comment">////null</span></div></pre></td></tr></table></figure></p>
<p>get()和getAll(),get()方法用于返回FormData对象中和指定的键关联的<code>第一个值</code>，getAll()方法会返回该 FormData 对象指定键的所有值。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">formData.<span class="built_in">append</span>(<span class="string">"a1"</span>, <span class="string">"aa"</span>);</div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"a1"</span>, <span class="string">"bb"</span>);</div><div class="line">formData.<span class="built_in">append</span>(<span class="string">"a1"</span>, <span class="string">"cc"</span>);</div><div class="line"></div><div class="line">formData.<span class="built_in">get</span>(<span class="string">"a1"</span>); // <span class="string">"aa"</span></div><div class="line">formData.getAll(<span class="string">"a1"</span>); // [<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>]</div></pre></td></tr></table></figure></p>
<p>has()方法会返回一个布尔值，表示该FormData对象是否含有某个name 。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.append</span>(<span class="string">"a1"</span>, <span class="string">"aa"</span>);</div><div class="line"><span class="selector-tag">formData</span><span class="selector-class">.has</span>(<span class="string">"a1"</span>);  <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>当然还有遍历，entries()遍历所有的数据，keys()遍历所有key，values()遍历所有value,用法都一样<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">formData.<span class="built_in">append</span>(<span class="string">'a'</span>, <span class="string">'aa'</span>);</div><div class="line">formData.<span class="built_in">append</span>(<span class="string">'b'</span>, <span class="string">'bb'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> pair of formData.entries()) &#123;     </div><div class="line">   console.log(pair[<span class="number">0</span>]+ <span class="string">', '</span>+ pair[<span class="number">1</span>]);   <span class="comment">//a,aa   </span></div><div class="line">&#125;                                         <span class="comment">//b,bb</span></div></pre></td></tr></table></figure></p>
<h4 id="好了，废话说了这么多，该进入正题了。"><a href="#好了，废话说了这么多，该进入正题了。" class="headerlink" title="好了，废话说了这么多，该进入正题了。"></a>好了，废话说了这么多，该进入正题了。</h4><p>想要对用户选择的图片进行准确的上传，用什么方式最简单呢？当然是用数组进行操作啦。<br>首先来个上传多文件上传input<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"file"</span> <span class="attribute">class</span>=<span class="string">"hidden"</span>  <span class="attribute">id</span>=<span class="string">"file"</span>  <span class="attribute">multiple</span>=<span class="string">"multiple"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>然后声明一个空数组，在onchang事件发生时把用户要上传的图片装进去<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> filearr = [];</div><div class="line"><span class="keyword">var</span> myfile = <span class="built_in">document</span>.getElementById(<span class="string">'file'</span>);</div><div class="line">myfile.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> files = <span class="keyword">this</span>.files; </div><div class="line">	<span class="keyword">if</span>(!files.length)<span class="keyword">return</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;files.length;i++)&#123;				</div><div class="line">		 filearr.push(files[i]);</div><div class="line">		 <span class="comment">//这里就进行添加图片的预览操作 	</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当用户删除图片时(.close是删除按钮，closeli()是.close点击时执行的函数)，filearr也进行删除，预览用的图片也要干掉，当然数据结构不同时自行处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">onclick</span>=<span class="string">"closeli(this)"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">var</span> closes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"close"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeli</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> closes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"close"</span>);</div><div class="line">	[].slice.call(closes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el,index</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(obj === closes[index])&#123;</div><div class="line">			filearr.splice(index,<span class="number">1</span>);</div><div class="line">		&#125;;</div><div class="line">	&#125;);				</div><div class="line">	parents(obj,<span class="string">'li'</span>).remove();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parents</span>(<span class="params">obj,node</span>)</span>&#123;					</div><div class="line">	<span class="keyword">if</span>(obj.parentNode.tagName==node.toUpperCase())&#123;</div><div class="line">		<span class="keyword">return</span> obj.parentNode;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span>  parents(obj.parentNode,node);					</div><div class="line">	&#125;				</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点击上传时，如果要连form表单中的数据一起提交就把form传入FormData中，否则可以创建一个FormData空对象提交，当然你也可以通过append添加自定义数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params"></span>)</span>&#123;		</div><div class="line">    <span class="keyword">var</span> myform = <span class="built_in">document</span>.querySelector(<span class="string">"form"</span>);		</div><div class="line">	<span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(myform);				</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;filearr.length;i++)&#123;    <span class="comment">//提交时，我们把filearr中的数据遍历一遍</span></div><div class="line">		formData.append(<span class="string">"upfile[]"</span>, filearr[i]); <span class="comment">//用append添加到formData中，就得用户最终要提交的图片了	</span></div><div class="line">	&#125;;</div><div class="line">	formData.append(<span class="string">"aaa"</span>, <span class="number">111</span>);	</div><div class="line">	<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest(); 				</div><div class="line">	request.open(<span class="string">"POST"</span>, <span class="string">"1.php"</span>,<span class="literal">true</span>);</div><div class="line">	request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;					</div><div class="line">		<span class="keyword">if</span>(request.readyState==<span class="number">4</span>)&#123;						</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;;                          <span class="comment">//注意一定不要设置request.setRequestHeader</span></div><div class="line">	request.send(formData);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用1.php看看上传的数据<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php">var_dump($_FILES);     <span class="comment">//上传的图片</span></span></div><div class="line"><span class="php">var_dump($_REQUEST);   <span class="comment">//上传的数据</span></span></div><div class="line"><span class="php"><span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure></p>
<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/09/09/1.png" alt="php接收的数据"></p>
<p>当然，你如果用的是jq的话，ajax得改一改。processData设置为false，因为data值是FormData对象，不需要对数据做处理；contentType设置为false，因为上传的是FormData对象，不需要设置内容类型；当然上传文件不需要缓存，cache:false。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function sub()&#123;	</div><div class="line">	$.ajax(&#123;</div><div class="line">		  url: <span class="string">"1.php"</span>,</div><div class="line">		  type: <span class="string">"<span class="keyword">POST</span>"</span>,</div><div class="line">		  data:formData,</div><div class="line">		  cache:false,         //不设置缓存</div><div class="line">		  processData: false,  // 不处理数据</div><div class="line">		  contentType: false   // 不设置内容类型</div><div class="line">	&#125;);	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于本文在github上的，做不了服务器演示，故不能成功提交，想看提交数据的自行打开浏览器的notwork查看：<br><iframe src="/code/file3.html" width="100%" height="270px" frameborder="0" allowfullscreen></iframe><br>ok，图片上传就算是完成了，当然本人原创内容，能力有限，才疏学浅，有错误的地方望大家指正。下次更新文件上传时的一些杂项，比如美化上传按钮，显示上传进度什么的。请期待：请期待:图片上传那些事-总结篇。<br>本文代码地址:<a href="https://github.com/xuxingeren/blog/tree/master/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%82%A3%E4%BA%9B%E4%BA%8B" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/0.png&quot; alt=&quot;图片上传&quot;&gt;&lt;br&gt;上次说完了图片上传预览，使用form提交就可以把图片进行提交了，但是在现实中这样的操作往往满足不了用户需求，一
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="图片上传" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="图片预览" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88/"/>
    
      <category term="图片批量上传" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>图片上传那些事-图片预览篇</title>
    <link href="http://xuxin123.com/2017/09/06/imgfile1/"/>
    <id>http://xuxin123.com/2017/09/06/imgfile1/</id>
    <published>2017-09-06T03:00:54.000Z</published>
    <updated>2018-01-02T02:28:46.355Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/0.png" alt="图片上传"><br>在前端工作中，有一些小功能是大家经常遇到的，图片的上传就是经常遇到的功能之一，平时图片上传有很多的需求，比如图片预览，批量上传，有些还要有上传进度，本文将介绍如何实现图片的批量上传和删除以及预览。<br>以前的浏览器由于安全问题和兼容问题，实现不了本地图片信息的读取预览，只能选择一张就上传一张图片到服务器，然后服务器返回图片地址从而实现图片的预览，但是随着老的浏览器(ie)的逐渐淘汰，以及各个浏览器标准的统一，图片的预览也变得十分简单了。<br>图片预览有两种方法可以实现：</p>
<h4 id="1-文件读取API-FileReader对象，它可以允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用-File-或-Blob-对象指定要读取的文件或数据，它的readAsDataURL方法将文件读取为-DataURL，在读取完成时调用如果设置onload事件，则调用之，在onload里能获得result属性，它包含一个data-URL格式的字符串以表示所读取文件的内容。"><a href="#1-文件读取API-FileReader对象，它可以允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用-File-或-Blob-对象指定要读取的文件或数据，它的readAsDataURL方法将文件读取为-DataURL，在读取完成时调用如果设置onload事件，则调用之，在onload里能获得result属性，它包含一个data-URL格式的字符串以表示所读取文件的内容。" class="headerlink" title="1.文件读取API-FileReader对象，它可以允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据，它的readAsDataURL方法将文件读取为 DataURL，在读取完成时调用如果设置onload事件，则调用之，在onload里能获得result属性，它包含一个data: URL格式的字符串以表示所读取文件的内容。"></a>1.文件读取API-FileReader对象，它可以允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据，它的readAsDataURL方法将文件读取为 DataURL，在读取完成时调用如果设置onload事件，则调用之，在onload里能获得result属性，它包含一个data: URL格式的字符串以表示所读取文件的内容。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myfile = <span class="built_in">document</span>.getElementById(<span class="string">'file'</span>);	</div><div class="line"><span class="keyword">var</span> List = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'list'</span>)[<span class="number">0</span>];</div><div class="line">myfile.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> files = <span class="keyword">this</span>.files;</div><div class="line">		<span class="keyword">if</span>(!files.length)<span class="keyword">return</span>;		</div><div class="line">		<span class="built_in">console</span>.log(files);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;files.length;i++)&#123;</div><div class="line">			<span class="keyword">var</span> oFReader = <span class="keyword">new</span> FileReader();</div><div class="line">			oFReader.readAsDataURL(files[i]);							</div><div class="line">			oFReader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">oFREvent</span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(oFReader);</div><div class="line">			<span class="keyword">var</span> oLi = <span class="string">'&lt;li&gt;&lt;img src="'</span>+oFREvent.target.result+<span class="string">'"&gt;&lt;span class="close" onclick="closeli(this)" &gt;&amp;times;&lt;/span&gt;&lt;/li&gt;'</span>;	</div><div class="line">			List.innerHTML+=oLi;</div><div class="line">        	&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h5 id="实际上这种方法就是将图片解析成base64编码，然后将这个编码传给img的src，使图片通过变成base64的方式能够显示在页面上。如下"><a href="#实际上这种方法就是将图片解析成base64编码，然后将这个编码传给img的src，使图片通过变成base64的方式能够显示在页面上。如下" class="headerlink" title="实际上这种方法就是将图片解析成base64编码，然后将这个编码传给img的src，使图片通过变成base64的方式能够显示在页面上。如下:"></a>实际上这种方法就是将图片解析成base64编码，然后将这个编码传给img的src，使图片通过变成base64的方式能够显示在页面上。如下:</h5><iframe src="/code/file1.html" width="100%" height="200px" frameborder="0" allowfullscreen></iframe>
<p>是不是简单的实现了图片的预览了，当然这种方法不是特别的好，因为base64是用于处理那些简单的图片的，一般稍微大一点的图片会使base64特别大，如图:<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/1.png" alt="base64"><br>那么第二种方法闪亮登场了。</p>
<h4 id="2-URL-createObjectURL，URL-createObjectURL-静态方法会创建一个-DOMString，其中包含一个表示参数中给出的对象的URL。这个-URL-的生命周期和创建它的窗口中的-document-绑定。这个新的URL-对象表示指定的-File-对象或-Blob-对象。"><a href="#2-URL-createObjectURL，URL-createObjectURL-静态方法会创建一个-DOMString，其中包含一个表示参数中给出的对象的URL。这个-URL-的生命周期和创建它的窗口中的-document-绑定。这个新的URL-对象表示指定的-File-对象或-Blob-对象。" class="headerlink" title="2.URL.createObjectURL，URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。"></a>2.URL.createObjectURL，URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。</h4><h5 id="通俗来说就是URL-createObjectURL-方法会根据传入的参数创建一个指向该参数对象的URL-这个URL的生命仅存在于它被创建的这个文档里-新的对象URL指向执行的File对象或者是Blob对象，通过给img的src赋值URL-createObjectURL-File-就能让其显示在页面上。"><a href="#通俗来说就是URL-createObjectURL-方法会根据传入的参数创建一个指向该参数对象的URL-这个URL的生命仅存在于它被创建的这个文档里-新的对象URL指向执行的File对象或者是Blob对象，通过给img的src赋值URL-createObjectURL-File-就能让其显示在页面上。" class="headerlink" title="通俗来说就是URL.createObjectURL()方法会根据传入的参数创建一个指向该参数对象的URL. 这个URL的生命仅存在于它被创建的这个文档里. 新的对象URL指向执行的File对象或者是Blob对象，通过给img的src赋值URL.createObjectURL(File)就能让其显示在页面上。"></a>通俗来说就是URL.createObjectURL()方法会根据传入的参数创建一个指向该参数对象的URL. 这个URL的生命仅存在于它被创建的这个文档里. 新的对象URL指向执行的File对象或者是Blob对象，通过给img的src赋值URL.createObjectURL(File)就能让其显示在页面上。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myfile = <span class="built_in">document</span>.getElementById(<span class="string">'file'</span>);	</div><div class="line"><span class="keyword">var</span> List = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'list'</span>)[<span class="number">0</span>];</div><div class="line">	myfile.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> files = <span class="keyword">this</span>.files;</div><div class="line">		<span class="keyword">if</span>(!files.length)<span class="keyword">return</span>;		</div><div class="line">		<span class="built_in">console</span>.log(files);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;files.length;i++)&#123;				</div><div class="line">			<span class="keyword">var</span> oLi = <span class="string">'&lt;li&gt;&lt;img src="'</span>+URL.createObjectURL(files[i])+<span class="string">'"&gt;&lt;span class="close" onclick="closeli(this)" &gt;&amp;times;&lt;/span&gt;&lt;/li&gt;'</span>;	</div><div class="line">			List.innerHTML+=oLi;        	</div><div class="line">		&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<iframe src="/code/file2.html" width="100%" height="200px" frameborder="0" allowfullscreen></iframe>
<p>这种方法简单多了，而且reatObjectURL可以有更好的性能，在处理上比用FileReader对象读取预览的更快，url十分简洁，完胜base64。<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/2.png" alt="reatObjectURL">]</p>
<p>好了，到这里开始详细讲解多图预览了，首先要有一个上传input,既然要多图上传，就要设置multiple。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"file"</span> <span class="attribute">class</span>=<span class="string">"hidden"</span>  <span class="attribute">id</span>=<span class="string">"file"</span>  <span class="attribute">multiple</span>=<span class="string">"multiple"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们给他设置一个onchang事件，监听上传文件都选择，通过其files属性得到FileList对象，可以通过这个对象访问到用户所选择的文件，这个FileList是一个数组，如果是单文件上传，要获取其File就是files[0]或者files.item(0)。<br>多文件上传的话，我们把得到的FileList对象循环一遍，获得每个文件的File，将这个File通过FileReader或createObjectURL进行处理，得到想要的预览url路径，然后创建一个img，将这个url路径赋给img的src。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myfile = <span class="built_in">document</span>.getElementById(<span class="string">'file'</span>);	</div><div class="line">myfile.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> files = <span class="keyword">this</span>.files; <span class="comment">//单文件就是this.files[0]，不用做for循环</span></div><div class="line">	<span class="keyword">if</span>(!files.length)<span class="keyword">return</span>;		</div><div class="line">	<span class="built_in">console</span>.log(files);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;files.length;i++)&#123;				</div><div class="line">		  <span class="built_in">console</span>.log(files[i]);  	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ok了，图片多图上传预览就完成了，但是实际情况中还要涉及到图片的多次重新选择和删除所选择的图片，那么该如何进行操作呢？我将在下篇博文中讲解，请期待:图片上传那些事-图片上传篇。<br>本文代码地址:<a href="https://github.com/xuxingeren/blog/tree/master/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%82%A3%E4%BA%9B%E4%BA%8B" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/09/06/0.png&quot; alt=&quot;图片上传&quot;&gt;&lt;br&gt;在前端工作中，有一些小功能是大家经常遇到的，图片的上传就是经常遇到的功能之一，平时图片上传有很多的需求，比如图
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="图片上传" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="图片预览" scheme="http://xuxin123.com/tags/%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88/"/>
    
  </entry>
  
  <entry>
    <title>Circle 进度环--css篇</title>
    <link href="http://xuxin123.com/2017/08/31/ring/"/>
    <id>http://xuxin123.com/2017/08/31/ring/</id>
    <published>2017-08-31T03:39:23.000Z</published>
    <updated>2017-12-23T07:46:24.391Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/08/31/1.png" alt="css进度环"><br>网上有各种进度，进度条啊，进度环，进度条做起来简单，可是有很多时候需要的是进度环，本篇是用css3的效果结合js完成进度环的。<br>废话不多说了，上结构<br>html:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"loading"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"progress"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>%<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>大概结构是这样的（图烂勿怪，我画图烂的有一手，<code>(ノへ￣、)</code>）<br><img src="http://ouzdb04w7.bkt.clouddn.com/image/2017/08/31/2.png" alt="结构"><br>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.loading</span>&#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> auto;</div><div class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#FFF</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.progress</span>&#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">130px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">130px</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">color</span>: red;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">130px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#FFF</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">span</span>,<span class="selector-class">.right</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-color</span>: red;</div><div class="line">	<span class="attribute">transition</span>: all <span class="number">0.4s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> <span class="selector-tag">span</span>&#123;				</div><div class="line">	<span class="attribute">border-radius</span>:<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">150px</span>; 	</div><div class="line">	<span class="attribute">transform-origin</span>: right;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	<span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">150px</span> <span class="number">150px</span> <span class="number">0</span>;</div><div class="line">	<span class="attribute">transform-origin</span>: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要的原理就是让<code>.left</code>，<code>.right</code>的<code>span</code>通过<code>transform: rotateZ</code>旋转角度，一开始<code>.left span</code>旋转180度到<code>.right</code>那边，然后通过<code>overflow: hidden</code>使其超过的隐藏，此时<code>.left span</code>完全在<code>.left</code>外面，完全隐藏了，然后通过减小<code>.left span</code>的旋转角度，让其在<code>.left</code>中显现出来，<code>.right span</code>同理。其实本来显示的会是一个扇形，但是由于有<code>.progress</code>这个白色的圆覆盖在<code>.loading</code>上面，就变成了圆环。</p>
<p>实现效果如下，可以在输入框输入：（本人对颜色极其不敏感，红色不好看就不要吐槽了，自己改）</p>
<iframe src="/code/ring.html" width="100%" height="480px" frameborder="0" allowfullscreen></iframe>
<h5 id="本文代码地址-链接"><a href="#本文代码地址-链接" class="headerlink" title="本文代码地址:链接"></a>本文代码地址:<a href="https://github.com/xuxingeren/blog/blob/master/%E5%B0%8F%E5%AE%9E%E4%BE%8B/%E5%9C%86%E7%8E%AF.html" target="_blank" rel="external">链接</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/08/31/1.png&quot; alt=&quot;css进度环&quot;&gt;&lt;br&gt;网上有各种进度，进度条啊，进度环，进度条做起来简单，可是有很多时候需要的是进度环，本篇是用css3的效果结
    
    </summary>
    
      <category term="前端" scheme="http://xuxin123.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://xuxin123.com/tags/js/"/>
    
      <category term="小实例" scheme="http://xuxin123.com/tags/%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="css3" scheme="http://xuxin123.com/tags/css3/"/>
    
      <category term="进度环" scheme="http://xuxin123.com/tags/%E8%BF%9B%E5%BA%A6%E7%8E%AF/"/>
    
  </entry>
  
</feed>
