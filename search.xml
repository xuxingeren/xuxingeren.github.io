<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[计算器小实例]]></title>
    <url>%2F2017%2F11%2F13%2FCalculator%2F</url>
    <content type="text"><![CDATA[最近在学react，没啥时间更新博客，等有空的时候把react基础写一写，react写法还是挺有意思的。这个实例没啥可说的，就是一个小实例而已，js实现最简单的计算器功能。当然原理很简单的，就是通过eval()可以计算字符串的特性实现字符串的运算，当然eval()还是少用为好，它的可读性非常差，不好再做优化和编译。 关键js代码12345678910111213141516171819202122232425262728293031var btns = document.querySelectorAll(&apos;button.btns&apos;),text = document.querySelectorAll(&apos;.box p&apos;),arr = [],Result;[].slice.call(btns).forEach(function(element) &#123; element.onclick = function()&#123; if(this.value === &apos;=&apos;)&#123; try&#123; Result = eval(&apos;(&apos;+arr.join(&apos;&apos;)+&apos;)&apos;); &#125;catch(e)&#123; Result = &apos;error&apos;; &#125; arr = [Result]; text[1].innerText = Result; &#125;else&#123; text[0].innerText = &apos;&apos;; if(this.value === &apos;C&apos;)&#123; arr = []; return; &#125; if(this.value === &apos;Back&apos;)&#123; arr.pop(); &#125;else&#123; arr.push(this.value); &#125; arr.map(function(num)&#123; text[0].innerText += num; &#125;); &#125; &#125;&#125;); 本文代码地址:链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>计算器</tag>
        <tag>小实例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拖拽小实例]]></title>
    <url>%2F2017%2F11%2F01%2Fdrag%2F</url>
    <content type="text"><![CDATA[在日常业务中有很多时候会用到拖拽，比如弹窗什么的，还有一些导航什么的拖动组成自己喜欢的导航。今天就写了两个小例子带大家了解PC端和移动端的拖拽是怎么实现的。 PC端拖拽pc端拖动主要是onmouse事件，当你鼠标对拖动目标点下时触发拖动目标的onmousedown事件，此时记录下鼠标点击的位置坐标和拖动目标的右上角坐标，得到二者之差，鼠标点下并且拖动触发document的onmousemove事件，获得不断移动的鼠标位置坐标，再减去之前得到的差值，把得到的Y轴移动值赋给top，X轴移动值赋给left；当鼠标松开时触发onmouseup事件，此时销毁document.onmousemove和拖动目标的onmousemove和事件，一个简单的拖拽就完成了。注意一下，当拖动是会有默认事件发生，比如往下拖动，如果有滚动条的话，会使滚动条滚动，这时需要阻止一下默认事件，event.preventDefault();当然，如果你要限制范围的话，可以在onmousemove中吧Y轴移动值和X轴移动值用判断限制一下，我限制的是不能超过文档窗口，有兴趣可以改一下。1234567891011121314151617181920212223242526272829303132function touch(id)&#123; var obj = document.getElementById(id); obj.onmousedown = function(event)&#123; var disX = event.pageX - obj.offsetLeft; var disY = event.pageY - obj.offsetTop; var W = document.documentElement.clientWidth-obj.offsetWidth; var H = document.documentElement.clientHeight-obj.offsetHeight; document.onmousemove = function(event)&#123; event.preventDefault(); var l = event.pageX - disX; var t = event.pageY - disY; if(l&lt;0)&#123; l = 0; &#125; if(l&gt;W)&#123; l = W ; &#125; if(t&lt;0)&#123; t = 0; &#125; if(t&gt;H)&#123; t = H; &#125; obj.style.top = t+ &apos;px&apos;; obj.style.left = l+&apos;px&apos;; &#125; obj.onmouseup = function()&#123; document.onmousemove = null; obj.onmouseup = null; &#125; &#125; &#125;; 移动端拖拽移动端的拖拽是由touch事件完成的，和PC的onmouse事件大致一样，touchstart是手指按下，可以通过event.targetTouches.length获得有多少手指按下，一般拖动一根手指，于是当event.targetTouches.length == 1时才能触发拖拽事件，event.targetTouches[0]相当于鼠标的event，通过这个可以获取手指按下的坐标，其余的大致和PC差不多。123456789101112131415161718192021222324252627282930313233343536373839function touch(id)&#123; var obj = document.getElementById(id); obj.addEventListener(&apos;touchstart&apos;, function(event) &#123; if (event.targetTouches.length == 1) &#123; var touch = event.targetTouches[0]; var disX=touch.pageX-obj.offsetLeft; var disY=touch.pageY-obj.offsetTop; var W = document.documentElement.clientWidth-obj.offsetWidth; var H = document.documentElement.clientHeight-obj.offsetHeight; obj.addEventListener(&apos;touchmove&apos;,move); function move(event)&#123; event.preventDefault(); var touch2=event.targetTouches[0]; var l=touch2.pageX-disX; var t=touch2.pageY-disY; if(l&lt;0)&#123; l=0; &#125;; if(l&gt;W)&#123; l=W; &#125;; if(t&lt;0)&#123; t=0; &#125;; if(t&gt;H)&#123; t=H; &#125;; obj.style.left=l+&apos;px&apos;; obj.style.top=t+&apos;px&apos;; &#125;; obj.addEventListener(&apos;touchend&apos;,chend); function chend(event)&#123; obj.removeEventListener(&apos;touchmove&apos;,move); obj.removeEventListener(&apos;touchend&apos;,chend); &#125;; &#125;; &#125;, false); &#125;; 不过有个地方要注意一下，移动端如果使用event.preventDefault();阻止默认事件的话，可能会对流畅度有点影响，如果你想应用到高级的浏览器上的话，就不要使用event.preventDefault();了，推荐的做法是用css中的touch-action来阻止默认事件，touch-action:none使触控事件发生在元素上时，不进行任何操作。也就是当touchstart发生时让html的touch-action为none，拖动完成touchend时，把html的touch-action改成auto就行了。1234567891011121314151617181920212223242526272829303132333435363738function touch(id)&#123; var obj = document.getElementById(id); obj.addEventListener(&apos;touchstart&apos;, function(event) &#123; if (event.targetTouches.length == 1) &#123; var touch = event.targetTouches[0]; var disX=touch.pageX-obj.offsetLeft; var disY=touch.pageY-obj.offsetTop; obj.addEventListener(&apos;touchmove&apos;,move); function move(event)&#123; document.documentElement.style.touchAction = &apos;none&apos;; var touch2=event.targetTouches[0]; var l=touch2.pageX-disX; var t=touch2.pageY-disY; if(l&lt;0)&#123; l=0; &#125;; if(l&gt;document.documentElement.clientWidth-obj.offsetWidth)&#123; l=document.documentElement.clientWidth-obj.offsetWidth &#125;; if(t&lt;0)&#123; t=0; &#125;; if(t&gt;document.documentElement.clientHeight-obj.offsetHeight)&#123; t=document.documentElement.clientHeight-obj.offsetHeight; &#125;; obj.style.left=l+&apos;px&apos;; obj.style.top=t+&apos;px&apos;; &#125;; obj.addEventListener(&apos;touchend&apos;,chend); function chend(event)&#123; document.documentElement.style.touchAction = &apos;auto&apos;; obj.removeEventListener(&apos;touchmove&apos;,move); obj.removeEventListener(&apos;touchend&apos;,chend); &#125;; &#125;; &#125;, false); &#125;; 本文代码地址:链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小实例</tag>
        <tag>拖拽</tag>
        <tag>touch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片加载]]></title>
    <url>%2F2017%2F10%2F27%2Fcomplete%2F</url>
    <content type="text"><![CDATA[图片懒加载技术相信大家再熟悉不过了，当网站中用到大量图片时回事网站打开时加载过慢，用户体验不好。用户其实看到的是可视区域，可视区域下面的图片什么的可以不用加载，当用户滚动滚动条要看到还没加载的图片时，在让其进行加载。所谓懒加载，就是把img的src放在一个自定义属性中，src为空，当触发某个事件时把自定义属性的值赋给src。1234&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1509098785051&amp;di=0cdd1c1cb8314d1fe3c460f3e13ece59&amp;imgtype=0&amp;src=http%3A%2F%2Fimg2.niutuku.com%2Fdesk%2F1207%2F1052%2Fntk121408.jpg&quot; alt=&quot;&quot; class=&quot;myimg&quot; /&gt;var img = document.getElementsByTagName(&apos;img&apos;)[0];img.src = img.getAttribute(&quot;data-src&quot;); 当然，一些小图片可以这样做，因为加载快嘛，一瞬间就完成了，但是网络比较慢的时候加载一些大图片时，就不太好了。一般懒加载默认有个默认的显示图片，但是直接替换的话，如果加载慢的话图片一下没加载出来就会显示一片空白，这样不太好，应该做到替换时图片直接显示出来，图片没加载完成还是显示的默认图片。这就要用到我们今天所说的东西了，判断图片加载完成后触发的事件。判断图片加载完成一般有三种方法 一、load事件123456var img = document.getElementsByTagName(&apos;img&apos;)[0];var Img = new Image();Img.src = img.getAttribute(&quot;data-src&quot;);Img.onload = function ()&#123;&#125; 简单粗暴，基本上所有浏览器都支持，但是有一个问题，在IE、Opera等浏览器中第一次加载是正常的，但是同一张图片再次加载时不会触发onload事件了，IE是根据图片是否显示过来判断，就是说当加载的图片显示出来后就不在执行onload事件了。 二、onreadystatechange事件12345678var img = document.getElementsByTagName(&apos;img&apos;)[0];var Img = new Image();Img.src = img.getAttribute(&quot;data-src&quot;);Img.onreadystatechange = function ()&#123; if(Img.readyState==&quot;complete&quot;||Img.readyState==&quot;loaded&quot;)&#123;&#125;&#125; 在ie下，img对象与xhr对象一样具有onreadystatechange事件，可以通过该事件判断图片是否加载完成，ie特有的，其他浏览器不支持。且问题和上面问题一样。 三、img的complete属性complete 属性可返回浏览器是否已完成对图像的加载，如果加载完成，则返回 true，否则返回 fasle，基本所有浏览器都支持，且不会有上面的问题。我们可以用其特性，做一个定时器，查看其是否加载完成，完成加载后执行一个回调函数。1234567891011121314151617181920212223242526272829303132333435&lt;button onclick=&quot;loadImage(document.getElementsByTagName(&apos;img&apos;),imgLoaded,allimgLoaded)&quot;&gt;加载&lt;/button&gt;&lt;img data-src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg1.jpg&quot; src=&quot;&quot; alt=&quot;&quot; class=&quot;myimg&quot; /&gt;&lt;img data-src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg2.jpg&quot; src=&quot;&quot; alt=&quot;&quot; class=&quot;myimg&quot; /&gt;&lt;img data-src=&quot;http://ouzdb04w7.bkt.clouddn.com/image/2017/10/27/timg3.jpg&quot; src=&quot;&quot; alt=&quot;&quot; class=&quot;myimg&quot;/&gt; function loadImage(objarr,callback,allcallback)&#123; var timer = null; var i = 0; var len = objarr.length; var load; load = function(i)&#123; if(i&lt;len)&#123; var img = new Image(); img.src = objarr[i].getAttribute(&quot;data-src&quot;); timer = setInterval(function()&#123; if(img.complete)&#123; clearInterval(timer); callback(objarr[i++],img); load(i); &#125; &#125;,80); &#125;else&#123; allcallback(); &#125; &#125;; load(0);&#125;function imgLoaded(obj,img)&#123; obj.src = img.src; console.log(img.width);&#125;function allimgLoaded()&#123; alert(&quot;图片全部加载完成&quot;);&#125; ok，上面将一堆图片的data-src链接放在了src中，图片都是瞬间出现，而不是慢慢加载出来的。本文代码地址:链接;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小实例</tag>
        <tag>图片替换</tag>
        <tag>图片加载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS-背景裁剪]]></title>
    <url>%2F2017%2F10%2F26%2Fbackground-clip%2F</url>
    <content type="text"><![CDATA[最近一直忙着看ES6（懒），好久都没更新博客（不想写），难得下午抽空写写。好了，今天的是文字对背景图片的裁剪，以及一些衍生的小东西。 background-clip:background-clip 属性规定背景的绘制区域。其值主要有四个1234background-clip: border-box;background-clip: padding-box;background-clip: content-box;background-clip: text; 顾名思义剪切掉边框的背景，剪切掉外边距的背景，剪切掉内容的背景，剪切掉文字外背景当然最后一个比较特殊，需要比较高级的浏览器才能看到。 -webkit-text-fill-color:检索或设置对象中的文字填充颜色，通过text-fill-color属性，可以做出一些例如渐变文字和镂空文字的效果。上面的配合-webkit-text-fill-color: transparent;属性可以让文字的填充色变成透明，透过文字看到背景。 background-position:background-position 属性设置背景图像的起始位置。这三者结合起来会产生什么效果呢？（请用谷歌浏览器观看）12345678910111213141516171819.text2 &#123; width: 720px; background-image: -webkit-linear-gradient(top, #fc0, #f30 50%, #c00 51%, #600); -webkit-background-clip: text; font-size: 80px; -webkit-text-fill-color: transparent; font-weight: bold; background-repeat: no-repeat; background-position: -800px 0; animation: loop 10s linear infinite;&#125;@keyframes loop &#123; 0% &#123; background-position: -800px 0; &#125; 100% &#123; background-position: -0 0; &#125;&#125; 很像卡拉OK的效果，是不是很酷呀。本文代码地址:链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>背景裁剪</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片上传那些事-总结篇]]></title>
    <url>%2F2017%2F09%2F21%2Fimgfile3%2F</url>
    <content type="text"><![CDATA[好了，总结篇终于开工了，这次来说说关于上传的一些琐碎事情。 1.file input的美化file input 好用是好用但是论起颜值来说差得不是一点半点，怎么能让这玩意儿拉低我们写好的页面颜值呢(ง •̀_•́)ง，来整整容吧，其实这个东西实现起来也很简单的首先我们把这个上传的input用display: none;隐藏掉，然后发挥自己力量写个高颜值的上传按钮，给这个按钮添加点击事件，点击的时候让上传input触发点击，ok，美化工作就完成了。1234567&lt;input type=&quot;file&quot; id=&quot;file&quot; style=&quot;display: none;&quot;/&gt;&lt;button class=&quot;btn&quot; onclick=&quot;upimg()&quot;&gt;上传&lt;/button&gt;var myfile = document.getElementById(&apos;file&apos;);function upimg()&#123; myfile.click();&#125; 2.上传筛选很多时候在上传东西的时候都要进行上传筛选的工作，避免用户把什么乱七八糟的东西都往后台扔，其实input有 accept 这个属性来进行提交文件类型的筛选的。1&lt;input type=&quot;file&quot; name=&quot;pic&quot; id=&quot;pic&quot; accept=&quot;image/gif, image/jpeg&quot; /&gt; //选择git和jpg图片上传 但是这玩意儿有点兼容问题，其筛选还可以选择全部文件，并不能达到筛选的目的。上文说到我们用数组装用户要上传的图片，那么筛选就可以在数组push的时候进行了。这样凡是验证不通过的filearr都不会push进去，也就提交不了了。 123456789101112var filearr = [];var myfile = document.getElementById(&apos;file&apos;);myfile.onchange = function()&#123; var files = this.files; for(var i = 0;i&lt;files.length;i++)&#123; if(!(files[i].type.indexOf(&apos;image&apos;)==0 &amp;&amp; files[i].type &amp;&amp; /\.(?:jpg|png|gif)$/.test(files[i].name)) )&#123; console.log(&apos;图片只能是jpg,gif,png&apos;); //上传其余文件的验证根据情况自己写 continue; &#125;; filearr.push(files[i]); &#125;&#125; 3.上传进度条在进行上传时有时候会有进度显示的需求，在XMLHttpRequest对象发出的HTTP请求时可以绑定progress事件，来获得传输的数据进度。123456789101112131415161718192021222324&lt;div class=&quot;progress&quot;&gt; &lt;div id=&quot;progressbar&quot; style=&quot;width:0%&quot;&gt; 0% &lt;/div&gt;&lt;/div&gt;var request = new XMLHttpRequest(); request.open(&quot;POST&quot;, &quot;1.php&quot;,true); request.onreadystatechange = function()&#123; if(request.readyState==4)&#123; &#125; &#125;; request.upload.addEventListener(&apos;progress&apos;,progress, false); //绑定progress事件 request.send(formData); var progressbar = document.getElementById(&apos;progressbar&apos;); function progress(e)&#123; if(e.lengthComputable)&#123; var percentComplete = Math.round(e.loaded/ e.total * 100 ); console.log(percentComplete); progressbar.style.width = percentComplete+&quot;%&quot;; progressbar.innerText = percentComplete+&quot;%&quot;; &#125; &#125; 至于进度条样式什么的靠自己发挥啦。 4.富文本编辑器问题有很多富文本编辑器都带有文件上传的功能，但是使用是很多时候都有点小问题，在用谷哥浏览器时，点击上传按钮后很久图片选择的弹窗才出现。其原因就是上传的input设置了多个筛选的accept，比如image/*和image/svg+xml，这会导致谷哥浏览器打开文件选择弹窗特别慢。解决办法 :涉及多个文件验证的用accept=&quot;image/jpeg, image/jpg, image/png, image/gif&quot;，避免使用类似image/*和image/svg+xml多个文件同时验证的写法，可以修改富文本js源码，或者富文本加载完成后用file.setAttribute(‘accept’,XXX)覆盖掉。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>图片上传</tag>
        <tag>上传进度</tag>
        <tag>上传美化</tag>
        <tag>上传筛选</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片上传那些事-图片上传篇]]></title>
    <url>%2F2017%2F09%2F09%2Fimgfile2%2F</url>
    <content type="text"><![CDATA[上次说完了图片上传预览，使用form提交就可以把图片进行提交了，但是在现实中这样的操作往往满足不了用户需求，一般在进行上传操作时可能会进行图片的多次重新选择和增删所选择的图片，这时用form提交就实现不了。 这时就该我们本篇的主角闪亮登场了：FormData。W3C在2008年提出XMLHttpRequest Level 2的草案中改进了XMLHttpRequest对象，在新版本的一些功能中就有FormData。利用FormData对象,我们可以模拟表单操作，然后通过XMLHttpRequest的send()方法来异步提交这个表单，发送FormData对象，这与form提交网页表单的效果完全一样，这个改进使得可以通过新版XMLHttpRequest对象上传文件，使得无刷新上传文件成为了可能。1.FormData创建一个FormData对象，可以直接通过new FormData()创建一个FormData空对象：1var formData = new FormData(); 当然，想要构造一个包含Form表单数据的FormData对象时，也可以通过HTML表单创建FormData对象，需要在创建FormData对象时指定表单的元素,这样做在发送数据时会将你的form表单的数据添加到formData中一起发送出去。12var myform = document.querySelector(&quot;form&quot;);var formData = new FormData(myform); 2.FormData操作方法FormData通过append(name, value,filename)来添加数据，其实就是类似于使用键值对添加数据，如果添加的name不存在则会新增一条数据，如果name已存在，则value将添加到数组的末尾，类似于[‘a1’,’a2’]。filename是可选的，这是指定文件的文件名，当value参数被指定为一个Blob对象或者一个File对象时，该文件名会被发送到服务器上，对于Blob对象来说，这个值默认为blob。12345formData.append(&quot;a1&quot;, &quot;aa&quot;);formData.append(&quot;a1&quot;, &quot;bb&quot;);formData.append(&quot;a1&quot;, &quot;cc&quot;);formData.getAll(&quot;a1&quot;); // [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;] set(name, value) 方法会对 FormData 对象里的某个 name 设置一个新的value，如果该 name 不存在，则添加。123formData.append(&quot;a1&quot;, &quot;aa&quot;);formData.set(&quot;a1&quot;,&quot;bb&quot;);formData.get(&quot;a1&quot;); // &quot;bb&quot; delete() 方法 会从 FormData 对象中删除指定 name 和它对应的 value。123formData.append(&quot;a1&quot;, &quot;aa&quot;);formData.delete(&quot;a1&quot;);formData.get(&quot;a1&quot;); ////null get()和getAll(),get()方法用于返回FormData对象中和指定的键关联的第一个值，getAll()方法会返回该 FormData 对象指定键的所有值。123456formData.append(&quot;a1&quot;, &quot;aa&quot;);formData.append(&quot;a1&quot;, &quot;bb&quot;);formData.append(&quot;a1&quot;, &quot;cc&quot;);formData.get(&quot;a1&quot;); // &quot;aa&quot;formData.getAll(&quot;a1&quot;); // [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;] has()方法会返回一个布尔值，表示该FormData对象是否含有某个name 。12formData.append(&quot;a1&quot;, &quot;aa&quot;);formData.has(&quot;a1&quot;); //true 当然还有遍历，entries()遍历所有的数据，keys()遍历所有key，values()遍历所有value,用法都一样12345formData.append(&apos;a&apos;, &apos;aa&apos;);formData.append(&apos;b&apos;, &apos;bb&apos;);for(var pair of formData.entries()) &#123; console.log(pair[0]+ &apos;, &apos;+ pair[1]); //a,aa &#125; //b,bb 好了，废话说了这么多，该进入正题了。想要对用户选择的图片进行准确的上传，用什么方式最简单呢？当然是用数组进行操作啦。首先来个上传多文件上传input1&lt;input type=&quot;file&quot; class=&quot;hidden&quot; id=&quot;file&quot; multiple=&quot;multiple&quot;/&gt; 然后声明一个空数组，在onchang事件发生时把用户要上传的图片装进去123456789var filearr = [];var myfile = document.getElementById(&apos;file&apos;);myfile.onchange = function()&#123; var files = this.files; for(var i = 0;i&lt;files.length;i++)&#123; filearr.push(files[i]); //这里就进行添加图片的预览操作 &#125;&#125; 当用户删除图片时(.close是删除按钮，closeli()是.close点击时执行的函数)，filearr也进行删除，预览用的图片也要干掉，当然数据结构不同时自行处理12345678910111213141516171819&lt;li&gt;&lt;img src=&quot;&quot;&gt;&lt;span class=&quot;close&quot; onclick=&quot;closeli(this)&quot;&gt;×&lt;/span&gt;&lt;/li&gt;var closes = document.getElementsByClassName(&quot;close&quot;);function closeli(obj)&#123; var closes = document.getElementsByClassName(&quot;close&quot;); [].slice.call(closes).forEach(function(el,index)&#123; if(obj === closes[index])&#123; filearr.splice(index,1); &#125;; &#125;); parents(obj,&apos;li&apos;).remove();&#125;function parents(obj,node)&#123; if(obj.parentNode.tagName==node.toUpperCase())&#123; return obj.parentNode; &#125;else&#123; return parents(obj.parentNode,node); &#125; &#125; 点击上传时，如果要连form表单中的数据一起提交就把form传入FormData中，否则可以创建一个FormData空对象提交，当然你也可以通过append添加自定义数据。12345678910111213141516function sub()&#123; var myform = document.querySelector(&quot;form&quot;); var formData = new FormData(myform); for(var i =0;i&lt;filearr.length;i++)&#123; //提交时，我们把filearr中的数据遍历一遍 formData.append(&quot;upfile[]&quot;, filearr[i]); //用append添加到formData中，就得用户最重要提交的图片了 &#125;; formData.append(&quot;aaa&quot;, 111); var request = new XMLHttpRequest(); request.open(&quot;POST&quot;, &quot;1.php&quot;,true); request.onreadystatechange = function()&#123; if(request.readyState==4)&#123; &#125; &#125;; //注意一定不要设置request.setRequestHeader request.send(formData);&#125; 可以用1.php看看上传的数据1234&lt;?phpvar_dump($_FILES); //上传的图片var_dump($_REQUEST); //上传的数据?&gt; 当然，你如果用的是jq的话，ajax得改一改。processData设置为false，因为data值是FormData对象，不需要对数据做处理；contentType设置为false，因为上传的是FormData对象，不需要设置内容类型；当然上传文件不需要缓存，cache:false。 12345678910function sub()&#123; $.ajax(&#123; url: &quot;1.php&quot;, type: &quot;POST&quot;, data:formData, cache:false, //不设置缓存 processData: false, // 不处理数据 contentType: false // 不设置内容类型 &#125;); &#125; 由于本文在github上的，做不了服务器演示，故不能成功提交，想看提交数据的自行打开浏览器的notwork查看：ok，图片上传就算是完成了，当然本人原创内容，能力有限，才疏学浅，有错误的地方望大家指正。下次更新文件上传时的一些杂项，比如美化上传按钮，显示上传进度什么的。请期待：请期待:图片上传那些事-总结篇。本文代码地址:链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>图片上传</tag>
        <tag>图片预览</tag>
        <tag>图片批量上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片上传那些事-图片预览篇]]></title>
    <url>%2F2017%2F09%2F06%2Fimgfile1%2F</url>
    <content type="text"><![CDATA[在前端工作中，有一些小功能是大家经常遇到的，图片的上传就是经常遇到的功能之一，平时图片上传有很多的需求，比如图片预览，批量上传，有些还要有上传进度，本文将介绍如何实现图片的批量上传和删除以及预览。以前的浏览器由于安全问题和兼容问题，实现不了本地图片信息的读取预览，只能选择一张就上传一张图片到服务器，然后服务器返回图片地址从而实现图片的预览，但是随着老的浏览器(ie)的逐渐淘汰，以及各个浏览器标准的统一，图片的预览也变得十分简单了。图片预览有两种方法可以实现： 1.文件读取API-FileReader对象，它可以允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据，它的readAsDataURL方法将文件读取为 DataURL，在读取完成时调用如果设置onload事件，则调用之，在onload里能获得result属性，它包含一个data: URL格式的字符串以表示所读取文件的内容。12345678910111213141516var myfile = document.getElementById(&apos;file&apos;); var List = document.getElementsByClassName(&apos;list&apos;)[0];myfile.onchange = function()&#123; var files = this.files; if(!files)return; console.log(files); for(var i = 0;i&lt;files.length;i++)&#123; var oFReader = new FileReader(); oFReader.readAsDataURL(files[i]); oFReader.onload = function (oFREvent) &#123; console.log(oFReader); var oLi = &apos;&lt;li&gt;&lt;img src=&quot;&apos;+oFREvent.target.result+&apos;&quot;&gt;&lt;span class=&quot;close&quot; onclick=&quot;closeli(this)&quot; &gt;&amp;times;&lt;/span&gt;&lt;/li&gt;&apos;; List.innerHTML+=oLi; &#125;; &#125; &#125; 实际上这种方法就是将图片解析成base64编码，然后将这个编码传给img的src，使图片通过变成base64的方式能够显示在页面上。如下: 是不是简单的实现了图片的预览了，当然这种方法不是特别的好，因为base64是用于处理那些简单的图片的，一般稍微大一点的图片会使base64特别大，如图:那么第二种方法闪亮登场了。 2.URL.createObjectURL，URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。通俗来说就是URL.createObjectURL()方法会根据传入的参数创建一个指向该参数对象的URL. 这个URL的生命仅存在于它被创建的这个文档里. 新的对象URL指向执行的File对象或者是Blob对象，通过给img的src赋值URL.createObjectURL(File)就能让其显示在页面上。1234567891011var myfile = document.getElementById(&apos;file&apos;); var List = document.getElementsByClassName(&apos;list&apos;)[0]; myfile.onchange = function()&#123; var files = this.files; if(!files)return; console.log(files); for(var i = 0;i&lt;files.length;i++)&#123; var oLi = &apos;&lt;li&gt;&lt;img src=&quot;&apos;+URL.createObjectURL(files[i])+&apos;&quot;&gt;&lt;span class=&quot;close&quot; onclick=&quot;closeli(this)&quot; &gt;&amp;times;&lt;/span&gt;&lt;/li&gt;&apos;; List.innerHTML+=oLi; &#125; &#125; 这种方法简单多了，而且reatObjectURL可以有更好的性能，在处理上比用FileReader对象读取预览的更快，url十分简洁，完胜base64。] 好了，到这里开始详细讲解多图预览了，首先要有一个上传input,既然要多图上传，就要设置multiple。1&lt;input type=&quot;file&quot; class=&quot;hidden&quot; id=&quot;file&quot; multiple=&quot;multiple&quot;/&gt; 然后我们给他设置一个onchang事件，监听上传文件都选择，通过其files属性得到FileList对象，可以通过这个对象访问到用户所选择的文件，这个FileList是一个数组，如果是单文件上传，要获取其File就是files[0]或者files.item(0)。多文件上传的话，我们把得到的FileList对象循环一遍，获得每个文件的File，将这个File通过FileReader或createObjectURL进行处理，得到想要的预览url路径，然后创建一个img，将这个url路径赋给img的src。123456789var myfile = document.getElementById(&apos;file&apos;); myfile.onchange = function()&#123; var files = this.files; //单文件就是this.files[0]，不用做for循环 if(!files)return; console.log(files); for(var i = 0;i&lt;files.length;i++)&#123; console.log(files[i]); &#125;&#125; ok了，图片多图上传预览就完成了，但是实际情况中还要涉及到图片的多次重新选择和删除所选择的图片，那么该如何进行操作呢？我将在下篇博文中讲解，请期待:图片上传那些事-图片上传篇。本文代码地址:链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>图片上传</tag>
        <tag>图片预览</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Circle 进度环--css篇]]></title>
    <url>%2F2017%2F08%2F31%2Fring%2F</url>
    <content type="text"><![CDATA[网上有各种进度，进度条啊，进度环，进度条做起来简单，可是有很多时候需要的是进度环，本篇是用css3的效果结合js完成进度环的。废话不多说了，上结构html:12345&lt;div class=&quot;loading&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;progress&quot;&gt;&lt;span&gt;0&lt;/span&gt;%&lt;/div&gt;&lt;/div&gt; 大概结构是这样的（图烂勿怪，我画图烂的有一手，(ノへ￣、)）css:12345678910111213141516171819202122232425262728293031323334353637383940414243.loading&#123; margin: 10px auto; width: 150px; height: 150px; position: relative; background-color: #FFF;&#125;.progress&#123; position: absolute; top: 50%; left: 50%; width: 130px; height: 130px; transform: translate(-50%,-50%); color: red; line-height: 130px; text-align: center; background-color: #FFF; border-radius: 50%;&#125;.left,.right&#123; float: left; width: 50%; height: 100%; position: relative; overflow: hidden;&#125;.left span,.right span&#123; display: block; position: absolute; width: 100%; height: 100%; background-color: red; transition: all 0.4s;&#125;.left span&#123; border-radius:150px 0 0 150px; transform-origin: right;&#125;.right span&#123; border-radius:0 150px 150px 0; transform-origin: left;&#125; 主要的原理就是让.left，.right的span通过transform: rotateZ旋转角度，一开始.left span旋转180度到.right那边，然后通过overflow: hidden使其超过的隐藏，此时.left span完全在.left外面，完全隐藏了，然后通过减小.left span的旋转角度，让其在.left中显现出来，.right span同理。其实本来显示的会是一个扇形，但是由于有.progress这个白色的圆覆盖在.loading上面，就变成了圆环。 实现效果如下，可以在输入框输入：（本人对颜色极其不敏感，红色不好看就不要吐槽了，自己改） 本文代码地址:链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>小实例</tag>
        <tag>css3</tag>
        <tag>进度环</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[垂直居中-文本篇]]></title>
    <url>%2F2017%2F08%2F26%2Fvertical%2F</url>
    <content type="text"><![CDATA[拖延症太强，每次想写点东西的时候总是会想着明天写，今天强行克服了，总算是动工了，好吧，我的第一篇技术博客。说真的css这玩意儿，很多人认为写写就行了，但在我看来这东西的复杂程度不下于js，写好真的是很难很难，各种布局都有不同的写法，写这个的原因是把常写的东西总结一下，希望给大家参考参考，同时也是对我自己的一个学习总结吧，见识不足，还请谅解。 html统一样式123&lt;div class=&quot;text&quot;&gt; &lt;span class=&quot;pox&quot;&gt;&lt;/span&gt;&lt;/div&gt; 知道高度1.绝对定位absolute12345678910111213//父标签用相对定位 .text1&#123; position: relative; height: 400px;&#125;//子标签用绝对定位，然后top:50%;margin-top:负的高度的一半，ok，垂直居中达成.pox1&#123; line-height: 30px; position: absolute; top: 50%; margin-top: -30px;&#125; 2.单行文本,这个简单12345//父标签行高=父标签行高度，ok了; .text4&#123; line-height:400px; height: 400px; &#125; 不知道高度1.table-cell,把div作为一个表格单元格使用,单元格垂直居中？so easy,用vertical-align: middle.1234567891011父标签 .text2&#123; display: table-cell; vertical-align: middle; height: 400px; &#125;子标签.pox2&#123; display: inline-block;&#125; 2.table,原理同上1234567891011父标签 .text3&#123; display: table; height: 400px; &#125;子标签.pox3&#123; display: table-cell; vertical-align: middle; &#125; 3.妙用:after占位居中,让:after占据全部高度,然后使用vertical-align:middle与:after竖直居中对齐,由于:after宽为0,看不见,就表现为pox5垂直居中了1234567891011121314151617父标签 .text5&#123; height: 400px;&#125;.text5:after&#123; content:&apos;&apos;; width:0; height:100%; display:inline-block; vertical-align:middle;&#125;子标签.pox5&#123; vertical-align:middle; display:inline-block;&#125; 4.display:flex,这玩儿说起来就多了,弹性盒子布局,布局爽到飞起，就是兼容性有点问题，不过加上-webkit-后能适应绝大部分游览器1234567891011121314父标签 .text6&#123; display: -webkit-flex; display: flex; height: 400px; -webkit-align-items: center; align-items: center;&#125; 子标签.pox6&#123; -webkit-flex: 1; flex: 1;&#125; 5.display:-webkit-box,这个是flex的旧版本,同上123456父标签 .text7&#123; display: -webkit-box; -webkit-box-align:center; height: 400px;&#125; 6.transform,利用translateY(-50%);translateY(-50%)其实就是垂直向上偏移物体自身高度的一半,效果和margin-top:负的高度的一半差不多,不过不需要知道具体高度,浏览器自己计算.12345678910111213父标签 .text8&#123; position: relative; height: 400px;&#125;字标签.pox8&#123; position: absolute; top: 50%; transform: translateY(-50%); left: 0;&#125; css的妙处就是可以用很多种方法实现同一个效果,本文代码地址:链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>那些年我们常写的css</tag>
        <tag>垂直居中</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[陈岱孙]]></title>
    <url>%2F2017%2F08%2F22%2Fcelebrity%2F</url>
    <content type="text"><![CDATA[有许多文人志士埋没在历史的尘埃之中，但是我希望其精神能让人见到，其事迹能让人知晓。一日一度，一生一事。云山苍苍，江水泱泱，先生之风，山高水长!在北大燕南园55号门前，立有一樽老人的铜像。老人手拄拐杖，端坐凝神，慈蔼的面目于平和中带着守护的神光。铜像下方，刻着老人生前常说的一句话：“我这辈子只做了一件事，教书。”这位执教了70年近百岁的老人，80岁还在给本科生上课，90岁还在带博士生，他就是经济学大师，陈岱孙。 01冥冥中有所注定似的，陈岱孙先生出生于农历闰八月二十七日，这一天恰恰是孔子的诞辰。1900年10月20日，陈岱孙先生出生于福州闽侯县。在福建当地，螺江陈氏乃是簪缨世家。有官至刑部尚书的陈若霖，也有海军中将陈庆甲。先生的伯祖父陈宝琛更是溥仪的帝师，内外亲戚里还有清政府驻外公使，位高权重。陈岱孙可以说是名正言顺的贵族子弟。深厚的家学渊源，陈岱孙自幼耳濡目染，恰逢新旧时代变幻，又受到西学影响。 宣统皇帝退位后，旧教育弊端积显，除了旧式私塾，父母还专门，请老师教他英文、数学。15岁陈岱孙考上鹤龄英华学校时，已经能说一口流利的英语。由于家学甚厚，陈岱孙成了“专读生”，免修各年级中文课程，专修外文课程。结果陈岱孙只花了两年时间，就把四年课程全部修完。1918年初，他考入清华大学留美预科班，与同时代的清华学子一样，两年后赴美留学。在上海考清华插班生时，陈岱孙曾去黄浦公园游玩，兴致勃勃来到门前，却发现大门上挂着牌子：华人不得入内。“不管你是不是租界，在我们中国人的土地上，却不允许我们自己进去，实在是欺人太甚！”陈岱孙满腔激愤，深感中华民族的屈辱，回去之后加倍努力读书，誓要振兴中华。 到美国之后，陈岱孙研读经济学，本就智商超群，较之一般学生，又不知刻苦多少倍。1922年，陈岱孙取得了，威斯康辛大学学士学位，还拿到了美国大学生最高荣誉——金钥匙奖。之后他又到哈佛攻读博士，整整四年，陈岱孙在图书馆专用的小隔间里，闭门读书，废寝忘食，最终以一纸论文通过答辩，顺利拿到博士学位。毕业之后，他又到英法意做短期考察。1927年，陈岱孙回到了阔别多年的祖国，成为清华经济系教授与系主任，次年，又兼任清华大学法学院院长，也是同时期清华校园中最年轻的院长。 先生在清华任教之初虽然在美国读书时，陈岱孙两耳不闻窗外事，几乎天天封闭在小隔间里用功。若凭此以为他只是学霸，那就大错特错了。在清华校园里，年轻的陈岱孙，向来有男神美誉。30岁不到的他，既有中国学者之风度，又有英美绅士的派头。一米八几的个头，经常是一身笔挺的西服，衣领、袖口妥帖平整，整个人不苟言笑。即便是平常衣衫，也能被他穿出一身别样风度。虽然他的嘴稍微有点歪，下唇有点儿地包天，然而脸部轮廓分明，透出一种刚强坚毅的气质，无论往哪儿一站，简直如同一樽铜像，成为人们目光的焦点。这份气宇轩昂一直保持到他的晚年，1988年墨西哥总统访问北大，陈岱孙先生一身中山装作陪，神采飞扬，丝毫不输给身边的总统。 02抗战爆发后，北平沦陷，清华师生穿越山河，与北大、南开共组西南联大。联大时期，陈岱孙先生的翩翩风度，更是让学校的女学生为之痴迷。陈岱孙擅长足球、网球、游泳、狩猎、高尔夫、曾在报纸上发表狩猎游记，一套高尔夫球杆收藏了60年。彼时，联大网球场上常有金岳霖、陈岱孙、赵乃博、浦薛凤四位老师的身影，其中最惹人注目的便是陈岱孙，他个头高，弹速快，频频上网拦击制胜。此外，他还喜欢听歌剧、昆曲，为学生组织“古音曲社”，亲自粉墨登场。闲来无事，他也好与人打斗智的桥牌，联大之中，鲜有敌手。这样一位近乎完美的老师，自然成了女学生们追慕的对象，当时联大里流传一句话：“以后恋爱，必须要比着陈先生的模子找。” 因其仪表非凡，教室前几排几乎坐满了女生。课堂上的先生魅力更是惊人：第一是时间概念精准。先生每次讲课，总提前2分钟站在黑板前，上课铃一响，他便旁征博引地讲起来，偶尔穿插点幽默，逗得学生哈哈大笑，自己却还一本正经。他讲完最后一个字，正好下课，一个字都不多。有一次，他讲完课将粉笔搁下，拍拍手上的粉笔灰，满教室的学生都怔怔地望着他。他便问学生：“你们怎么还不走？”学生叽叽喳喳地说还没打铃，陈岱孙先生满脸自信道：“你们走吧，学校的铃声打错了。”果不其然，那天下课铃声迟了好几分钟。 第二便是讲义。先生讲课能精确到每个字的时间，也是因为讲义的底子太过深厚。当时在西南联大，只有两位教授，能把专深学科讲到通透圆润的地步，一节课讲下来，正好是一个闭环的章节，知识结构首尾相连，比教科书还要准确。其中一个是冯友兰，另一位就是陈岱孙。听陈先生讲课，听者只要肯认真记下笔记，听完就等于得到了一部专著。如若学生手头勤快一点，听一节课的内容记一次笔记，就等于抄下一部专著的一个章节。这是清华派的一个传统，他们将大量的精力放在课堂和讲义上，陈寅恪、金岳霖莫不如此，所以这几位大师一生的著作都不多。一堂课的讲义，他们甚至要花一生的时间不断完善。直到七八十岁，陈岱孙先生还在继续做这项工作。 第三则是先生讲课的实用性。他讲《财经学》，年终论文命题，便是《假如我是财经部长》，还有一次学年考试，要求学生，分析校外摆摊人、修鞋匠的经济成分，一切从实际出发，锻炼学生，融会贯通、学以致用的能力。经济学家平新乔于北大师从陈岱孙先生时，曾将自己的论文递给陈先生审阅，初稿写下来之后兴冲冲地拿给老先生看，两个星期后，老人家批下来，平新乔接过一看，黄色的竖行纸，二十多页批注，一共七千字。第二遍改了再送上去，又批改了六页，直到第三遍才通过。平新乔后来感慨道：“看了陈老师的东西，才知道什么是威严，什么叫知识就是力量。”在陈先生面前，学生的任何一点沾沾自喜，和偷懒都会显得无地自容。这份严于治学的精神，更是影响了无数人。 最后一点，是陈先生决不用英语授课。虽然自小英语娴熟，留洋多年。但先生生平痛恨用英文讲课或夹杂英文，认为这是殖民地心态，未能摆脱对西方的崇拜。当时在清华授课的人里面，只有他和陈达坚决不用英文。 03金岳霖曾在回忆录中说过这么一句话：“还是要承认有非常之能办事的知识分子，陈岱孙先生就是这样一位。”金岳霖之所以这么说，是因为抗战结束后，在恢复清华校园的工作上，陈岱孙贡献了不可磨灭的力量。１９４５年８月１５日，日本无条件投降，临时组建的西南联大也面临着各回各地的局面。然而抗战期间，清华校园被日军破坏得十分凄惨，当时半个中国都在搬家，交通工具匮乏，联大便决定在昆明多待一年，派人回清华、北大、南开各校整理校产。１１月７日的清华校务会上，陈岱孙成为校产保管委员会的主席。 日军侵华期间，清华惨状，令人目不忍视、耳不忍闻。日本特务机关将土木工程系图书、气象系图书、无数化学仪器、打字机、实验器材用卡车搬走。之后，军队更是强占了校舍，驻军超过三千人，他们在校内搭建临时医院，将体育场变成了马厩、伙房，把老师的校舍变成“慰安溜”，各种家具、仪器被随意变卖，拿不走的搬不动的，干脆砍了之后拿来烧柴。图书馆内藏书，四万多种被日伪单位瓜分，连钢制书架也被分得干干净净。根据后来梅贻琦核定、统计，粗估清华校产损失约法币4876869400元。实际损失更是不可拿金钱数目来衡量。更残忍的是，日本华北派遣军，竟在清华礼堂外举办军犬比赛，数十名中国战俘和平民，被活活咬死，血流成河，图书馆的后面的煤厂，也变成了焚烧尸体的炉子… 抗战胜利后，国民政府，制定收容办法，遣特派员收容财产，不少人趁机大发其财，到了收复区简直如同土匪。不少地方的百姓感叹道：“刚送走了日本鬼子，又来了一帮畜生！”当陈岱孙与同事回到满目疮痍的清华时，要面对的交涉对象竟不是日军，而是先他们一步接管了校园的国军。当时国军极其蛮横，封存一切物资。陈岱孙致电梅贻琦，三番两次交涉无果。非但如此，国军第五补给区，强占清华全部医疗器械、药品后，为了赖着不走，居然动议，将日军搭建的医院改为兵站医院。眼看西南联大的学生就要回来，陈岱孙只好四处奔走，将军方行径公布于众，大声疾呼：“甚盼其能本维护教育之旨即行迁让，不再延宕，否则不惟摧残教育，责有攸归，而军令不行，纪律何存？” 之后校舍修缮十分艰难，陈岱孙四处寻找施工单位，教育部的拨款杯水车薪，连添置基本设备的钱都不够。陈岱孙接收清华时，全校屋馆设施损坏高达７５％，学生、老师宿舍高达８０％。陈岱孙一周工作七天，事无巨细，从进料到验货亲力亲为，数月之间，竟然将清华园恢复了战前原貌。其中但凡能依旧物重做的，全部复原。图书馆阅览室里只留下一把椅子没被烧毁，他便命人按照原样先做了两百套，校内碉堡全部清除，道路渐次修复，复又种植花草。 随后，他又带人去旧货市场，将日本人盗卖的清华旧物一一购回。８月，师生从昆明大批返回，来到经历浩劫的清华园，面对故园如旧，草木芬芳，全部露出不可思议的表情。校务长潘光旦叹道：“九年噩梦，已成云烟，今日归来，恍若离家未久。”开学后，清华将国军遗留杂物，通过抽签分配给大家，陈岱孙只得到一条军毯作为纪念，从此垫在床下，相伴终身。先生行动之敏捷，办事之果断，校长梅贻琦每每谈起，都对其夸赞不绝。 04更为人称道敬仰的，乃是先生高尚的人格。先生性格温和，与世无争，和谁都能相处。早在联大时，教授之间也有龃龉发生，毕竟都是恃才傲物之人，彼此会瞧不顺眼。但陈岱孙和朱自清处得很好，先生还为此写了一付对联，上联是“小住为佳，得小住且小住”，下联是“如何是好，愿如何便如何”。后来回清华与一代物理学宗师叶企孙同住，亦是相交甚笃。 照理说，陈先生出生于簪缨世家，祖上属于大官僚阶级，母系又有清朝外交官，十年内乱该是容易受冲击的对象。正是因为先生一生平和，与人无争，那十年间居然没受到过于激烈的批判，旁人无非是给他戴了“资产阶级趣味”的帽子，连工宣队的人都尊称其“先生”，简直不可思议。70多岁时，他被下放到江西鲤鱼洲，本来先生已经做好了死的准备，结果临行前突然不用去了。随后他被安排到丰台庞各庄收割麦子，先生个子高，弯腰割一会儿腰就剧痛，但最终他还是忍受了过来。 那个时期过去后，人际关系仍旧紧张，人们内心的恩仇和对立尚未消失。先生却以博大的胸怀面对所有人，在“育人”领域起到了示范作用。当时人们心中对知识分子的轻慢犹存，一次先生出去排队买烟，别人提醒售货员：“这是著名教授陈岱孙先生，先卖给他吧。”售货员翻了个白眼，让老先生好好排队，先生顺从不语。 这件事第二天登上《参考消息》，一个学生见报，专门来找先生。先生看了呵呵一乐：“买烟还登个报！怪难看的！”学生又道歉说：“先生还记得我吗，以前我也批过先生。”先生摆摆手道：“有吗？我不记得了。”1976年，平新乔几度报考研究生皆遭到阻力，最后一次报考北大经济系，导师便是陈先生。平新乔当时战战兢兢，无比惶恐，陈先生对他说：“我自己年轻时，也做过很多傻事、错事，也说过不少傻话、错话，谁不犯错误？错了，知道了，改就是了，应该有再学习的机会。”孔子推行的“仁教德育”，在先生这里，得到了最好的体现。 先生与冯友兰，1973年，内乱，消瘦中国经济学领域两大泰斗，一个是北大校长马寅初，一个是陈岱孙。马什么话都敢说，作为一个经济学家，他一两年之内有好几百场讲演，讲演对象是工商界人士，陈岱孙先生一辈子老老实实做教师，只给全职学生讲课，从不对企业家演讲。碰到什么事儿，马寅初喜欢从经济学角度写文章，见诸报端，所以《马寅初全集》有十卷之多。陈先生一生专于讲义，直到晚年才写下专著。在政治思潮涌动时期，学术领域受到干扰，不少学者随风转蓬，昧着良心以谋个人富贵，陈先生屹立不动，整整二十年只字未写。难怪有人说：“先生写文章与不写文章，都彰显了一个真正爱国知识份子的人格。” 05先生出身贵族，才学过人，胸襟坦荡，无论治学、品格，皆是世人的楷模。然而令人诧异的是，如此风流韵极，居然孤独一生，从未婚娶。曾有传言说，陈岱孙单身，是因为和周培源一起看上了王蒂澂。后来周与王结为伉俪，岱老因此孤独终身，然而全是胡诌，并无依据可考。晚年岱老接受采访时说：“为什么没有结婚，一是因为没时间，二是因为爱情需要两情相悦。”家人也曾安排他去相亲，但岱老始终没能遇到令自己心动的对象。在他看来，不是随意牵手就能点燃一场爱情，不是随便一个女子便能将就半生，恩爱承欢。他将自己的热忱与心力都留在了讲台，实在腾不出更多的精力给个人。 虽然一个人过了一辈子，但先生生活自理能力极强，衣柜、箱子总是整整齐齐。先生虽出身贵族，生活上却极其简朴，常年素衣淡茶，一个手提箱用了半个世纪，住所里没有空调，出门都是赶公交车。要知道在30年代，陈先生为法学院院长，一个月工资400大洋，400大洋是什么概念？放在今日，就是一个月5万的月薪！但到了1995年，工资只有860元人民币，如此大的落差，先生却从不放在心上。一位学生被错“划右”，精神失常，来找先生求救，先生早就不记得他了，但每个月给他寄钱，一寄就是整整8年！这就是一代宗师的高洁之风，怎能不叫人仰止？ 直到先生晚年，学生前去家中拜访，发现他用的还是西南联大回来时，在地摊上买的旧家具。谈到金钱，作为经济学宗师，先生淡淡地说：“人不能没钱，钱是需要的，但做事情完全为了钱，抛弃理想和事业，那是很危险的。”他肯定钱应有的作用，但反对拜金。1994年，岱老给《教育艺术》杂志题词：“学不厌，智也；教不倦，仁也，二者其教育之本乎。” 自1928年起，先生辗转清华、西南联大，北大三校，历经70年的岁月沉浮，直到90岁还在教书，终其一生，丹心可鉴，高洁其行，高山其才，世间罕见，他一生未婚，将自己毕生之思想、灿烂之光热，全都留给了三尺讲台，门下弟子遍及全球，学术卓越者堪称大师，仁教德育之光，长存世间，照亮之辈，何止千万？遥想当年，日本人打进北京，梅贻琦临时委托他去长沙，准备接清华过去，开完校务会，先生竟然连家都没回，穿着一件夏天长袍就奔上了去往长沙的道路。如此坚定的意志和为教育而行的果敢之心，世间再无二者！穿过时光的重重迷雾，我们仿佛还能看到先生笃定的背影，为中国之教育，奔波在硝烟弥漫的大地上，其心中装的又何止一校？乃是整个愤愤将起的中华！ 061997年7月9日，先生因病住院，在家门口从容登车时，亲人劝他换一件衣服，先生笑微微道：“不必了，过两天就回来。”27日，先生悄然辞世…弥留之际，先生常说的事情只有两件，其一，威斯康辛大学和哈佛，联合颁发给他的那把小金钥匙，曾被人趁乱抄走，他想知道如今在谁的手里。其二，他念念不忘清华大学，死前最后一句话是：“这里是清华…” 转载 网易新闻]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>名人</tag>
        <tag>纪念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一个博客]]></title>
    <url>%2F2017%2F08%2F21%2FHello%2F</url>
    <content type="text"><![CDATA[考虑了很多，由于个人还是太懒，个人网站关掉了，不准备维护，因为已经很久没写什么东西了，还有就是嫌麻烦，以后写的东西将全部展示在这个博客上面，算是汇总一下吧，总结和梳理一下遗漏的知识点，当做我的学习历程吧。 .box{border-radius: 4px;line-height: 100px;color:#FFF;text-align:center;font-size:16px;margin:0 auto;height: 100px;width: 200px;background: rgba(255, 20, 147, .85);position: relative;} .box span{border: 26px solid transparent;border-bottom-color: rgba(255, 20, 147, .85);border-top: 0;border-right:0 ;position: absolute;top: 0;left: 50%;margin: -26px 0 0 -13px;} hello myblog]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
</search>
